namespace drr.regulation.common
version "${project.version}"

import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.party.*
import cdm.event.common.*
import cdm.event.workflow.*
import cdm.observable.asset.*
import cdm.product.collateral.*
import cdm.product.asset.*
import drr.enrichment.common.*
import drr.regulation.esma.emir.refit.trade.*
import cdm.product.template.*
import cdm.product.common.settlement.*
import iso20022.auth108.esma.*


annotation nonReportable:

type ExecutingEntity:
    isInvestmentFirm boolean (1..1)
    addressOfBranch Address (1..1)
    addressOfIncorporation Address (1..1)

type ReportingSide: <"Specifies the reporting roles for a ReportableEvent or ReportableCollateral.">
    [rootType]
    reportingParty Party (1..1) <"The counterparty to the transaction (buyer or seller of the contract) from whose perspective the transaction is being reported.">
        [metadata reference]
    reportingCounterparty Party (1..1) <"The counterparty to the transaction (buyer or seller of the contract) on the non-reporting side.">
        [metadata reference]
    partyResponsibleForReporting Party (0..1) <"The party responsibility for submitting the transaction report to the authority.">
        [metadata reference]
    reportSubmittingParty Party (0..1) <"The party submitting the transaction report to the authority.">
        [metadata reference]

type RegimeReportingSide: <"Specifies the reporting roles for a particular regime and supervisory body.">
    [rootType]
    regimeName RegimeNameEnum (1..1) <"Identifies the reporting regime under which this data is reported. For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF">
    supervisoryBody SupervisoryBodyEnum (0..1) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">
    reportingSide ReportingSide (0..1) <"Specifies the reporting roles for (self) reporting.">
    delegatedReportingSide ReportingSide (0..1) <"Specifies the reporting roles for delegated reporting.">

    condition ReportingSide:
        reportingSide exists or delegatedReportingSide exists

type ReportableEvent: <"Specifies a workflowstep with enriched information required for reporting.">
    [rootType]
    originatingWorkflowStep WorkflowStep (1..1) <"The workflowstep that originated the reportable event.">
    reportableTrade TradeState (0..1) <"The reportable trade decomposed from the originating workflow step when required.">
    reportableInformation ReportableInformation (1..1) <"Additional information required for a reportable transaction, including the reporting regime.">
    reportablePosition CounterpartyPositionState (0..1) <"The reportable position decomposed from the originating workflow step when required.">

type RegimeReportableEvent extends ReportableEvent: <"Specifies a reportable event with a reporting side for each regime.">
    [rootType]
    regimeReportingSide RegimeReportingSide (0..*)

type TransactionReportInstruction extends ReportableEvent: <"Specifies a reportable event with with a single reporting side.">
    [rootType]
    reportingSide ReportingSide (1..1)

type ReportableCollateral:
    [rootType]
    collateralDetails CollateralDetails (0..1) <"The reportable collateral information">
    reportableInformation ReportableInformation (1..1) <"Additional information required for a reportable transaction, including the reporting regime.">

type RegimeReportableCollateral extends ReportableCollateral: <"Specifies a reportable collateral with a reporting side for each regime.">
    regimeReportingSide RegimeReportingSide (0..*)

type CollateralReportInstruction extends ReportableCollateral: <"Specifies a reportable collateral with with a single reporting side.">
    [rootType]
    reportingSide ReportingSide (1..1)

type CollateralDetails:
    collateralTimestamp zonedDateTime (1..1)
    collateral Collateral (0..1)
    uniqueTradeIdentifier TradeIdentifier (0..1)
    action MarginActionEnum (0..1)
    collateralisationCategory CollateralisationType3Code__1 (1..1)

type ReportableInformation: <"Specifies the relevant regulators or other supervisory bodies the transaction is relevant for, and regime specific information required relating to the transaction and the parties.">

    confirmationMethod ConfirmationMethodEnum (0..1) <"Specifies the method for confirmation of the transacion.">
    executionVenueType ExecutionVenueTypeEnum (1..1) <"Specifies the type of venue where a trade could be executed.">
    intragroup boolean (0..1) <"Specifies whether the contract was entered into as an intragroup transaction, defined in Article 3 of Regulation (EU) No 648/2012.">
    largeSizeTrade boolean (0..1) <"Specifies whether the sender of this trade considers it to be a large notional trade or block trade for reporting purposes, and thus eligible for delayed public reporting. Normally this will only be applicable for off-facility trades.">
    partyInformation PartyInformation (1..*) <"Specifies party specific information required for reporting of the transaction">
    sefOrDcmAnonymousIndicator boolean (0..1) <"Indicator of whether the swap was executed anonymously on a SEF or DCM. When set to true, counterparty details will be masked on reporting.">
    originalExecutionTimestamp zonedDateTime (0..1) <"Date and time a transaction was originally executed, resulting in the generation of a new UTI. This data element remains unchanged throughout the life of the UTI.">
    enrichment EnrichmentData (0..1)
    cryptoBased boolean (0..1) <"Indicator whether the derivative is based on crypto-assets.">
    underlyingAssetLastAvailableSpotPrice PriceSchedule (0..1) <"Last Available Spot Price of the underlying asset. This price is only needed for a regulatory purpose, that being the reporting of the notional amount for commodity basis products">
    transactionInformation TransactionInformation (0..*)
    reportableAction ReportableActionEnum (0..1) <"Specifies the regulatory lifecycle event action for the ReportableEvent">
    subsequentPositionUTI PositionIdentifier (0..1) <"The UTI of the position in which a derivative transaction is included.">
    counterpartyPositionPriorUTI PositionIdentifier (0..1) <"The prior position UTI (eg in case of a corporate action of type StockIdentifierChange).">

type TransactionInformation:
    regimeName RegimeNameEnum (1..1) <"Identifies the reporting regime under which this data is reported. For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF">
        [metadata scheme]
    supervisoryBody SupervisoryBodyEnum (0..1) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">
        [metadata scheme]
    transactionIdentifier TradeIdentifier (0..1) <"Identifier to use specifically in the context of reporting to a specific regime">
    priorTransactionIdentifier TradeIdentifier (0..1) <"Identifier of the prior transaction">
    esmaTransactionInformation ESMATransactionInformation (0..1) <"Transaction information required for reporting a transaction under ESMA.">

    condition SupervisorInformation: <"For certain regimes a supervisor registration must be provided.">
        if regimeName = RegimeNameEnum -> DoddFrankAct
        then supervisoryBody = SupervisoryBodyEnum -> CFTC
                or supervisoryBody = SupervisoryBodyEnum -> SEC

    condition RegimeInformation:
        if supervisoryBody = SupervisoryBodyEnum -> ESMA
        then esmaTransactionInformation exists
        else esmaTransactionInformation is absent

type ESMATransactionInformation:
    duration CommodityTimeUnitEnum (0..1) <"Specifies the approximate duration of the contract in the context of commoditiy trading. Exact boundaries of each value have not been precisely defined by so far. This attribute is expected to be removed when values exact definitions of values emerge and a functional assessment of duration - based upon start and end dates and times - can be implemented.">

type ReportingRegime: <"Specifies the regulatory regime requiring reporting of the transaction.">
    regimeName RegimeNameEnum (1..1) <"Identifies the reporting regime under which this data is reported. For example, Dodd-Frank, MiFID, HongKongOTCDRepository, ODRF">
        [metadata scheme]
    supervisoryBody SupervisoryBodyEnum (0..1) <"Identifies the specific regulator or other supervisory body for which this data is produced. For example, CFTC, SEC, UKFSA, ODRF, SFC, ESMA.">
        [metadata scheme]
    mandatorilyClearable MandatorilyClearableEnum (0..1) <"Indicator of whether the transaction is mandatorily clearable.">
    clearingException ClearingException (0..1) <"Identifies the type of clearing exception or exemption that the counterparty has elected.">
    postPricedIndicator boolean (0..1) <"Indication of whether the transaction satisfies the definition of 'post-priced swap'.">
    asicPartyInformation ASICPartyInformation (0..1) <"Party information required for reporting a transaction to the ASIC.">
    cftcPartyInformation CFTCPartyInformation (0..1) <"Party information required for reporting a transaction to the CFTC.">
    esmaPartyInformation ESMAPartyInformation (0..1) <"Party information required for reporting a transaction under ESMA.">
    fcaPartyInformation FCAPartyInformation (0..1) <"Party information required for reporting a transaction under FCA.">
    secPartyInformation SECPartyInformation (0..1) <"Party information required for reporting a transaction under SEC.">
    reportingRole ReportingRoleEnum (0..1) <"Specifies the reporting role of the party with respect to the regime.">
    technicalRecordId string (0..1) <"Unique technical identification of the original data for which the status is provided for the BDR.">
        [metadata scheme]

    condition SupervisorInformation: <"For certain regimes a supervisor registration must be provided.">
        if regimeName = RegimeNameEnum -> DoddFrankAct
        then supervisoryBody = SupervisoryBodyEnum -> CFTC
                or supervisoryBody = SupervisoryBodyEnum -> SEC

    condition CFTCReportingRegime:
        if supervisoryBody = SupervisoryBodyEnum -> CFTC
        then cftcPartyInformation exists
        else cftcPartyInformation is absent

    condition SECReportingRegime:
        if supervisoryBody = SupervisoryBodyEnum -> SEC
        then secPartyInformation exists
        else secPartyInformation is absent

    condition ESMAReportingRegime:
        if supervisoryBody = SupervisoryBodyEnum -> ESMA
        then esmaPartyInformation exists
        else if supervisoryBody = SupervisoryBodyEnum -> FCA
        then fcaPartyInformation exists
        else esmaPartyInformation is absent

    condition ASICReportingRegime:
        if supervisoryBody = SupervisoryBodyEnum -> ASIC
        then asicPartyInformation exists
        else asicPartyInformation is absent

type PartyInformation: <"Specifies party specific information required for reporting of the transaction">
    partyReference Party (1..1) <"Specifies the party that is associated with the enriched information.">
        [metadata reference]
    relatedPerson NaturalPersonRole (0..*) <"The role(s) that natural person(s) may have in relation to the transaction.">
    relatedParty RelatedParty (0..*) <"Specifies one or more parties that perform a role within the transaction. The related party performs the role with respect to the party identified by the 'partyReference'.">
    regimeInformation ReportingRegime (1..*) <"Specifies the regulatory regime requiring reporting of the transaction. A list of regime information is provided when an event is reportable to more than one regime.">

type ASICPartyInformation: <"Enriched party information required for reporting a transaction under ASIC.">
    nonReportedTradePortfolio boolean (0..1)  <"Specifies whether the portfolio contains non reported transactions.">
    smallScaleBuySideIndicator boolean (0..1) <"Indicator whether the reporting enitity is acting as a small-scale buy side and meets the 'small-scale' criteria">

type CFTCPartyInformation: <"Enriched party information required for reporting a transaction to the CFTC.">
    organizationType CFTCEntityClassificationEnum (0..1) <"Specifies the nature of the type as registered with the CFTC.">
    federalEntity CFTCFederalEntityClassificationEnum (0..1) <"Indicator of whether counterparty is a federal entity, and which type.">
    financialEntity CFTCFinancialEntityClassificationEnum (0..1) <"Indicator of whether counterparty is a financial entity, and which type.">
    physicalCommodityContractIndicator boolean (0..1) <"Indicator of whether the contract is classified as a physical commodity by referencing one of the contracts described in P43 Appendix B. The approach is consistent with 43.4(c)(4)(ii).">
    isUSPerson boolean (0..1)

type ClearingException: <"Specifies information related to clearing exceptions or exemptions that are applied to the trade.">
    clearingException boolean (0..1) <"Indication of whether an exception from normal clearing mandates is being applied caused by the type of the parties or their relationship, such as inter-affiliate trades.">
    clearingExceptionReason ClearingExceptionReasonEnum (0..*) <"Identifies the type of clearing exception or exemption that the counterparty has elected.">
    clearingExceptionDeclaration ClearingExceptionDeclaration (0..1) <"Specifies supporting evidence when claiming an end user exception.">

    condition ClearingException: <"When Clearing Exception is 'True' a Clearing Exception Reason should be provided.">
        if clearingException = True
        then clearingExceptionReason exists
        else if clearingExceptionReason exists
        then clearingException = True

type ClearingExceptionReason:
    exceptionReason ClearingExceptionReasonEnum (0..1)

type ClearingExceptionDeclaration: <"Specifies supporting evidence when claiming an end user exception.">
    creditDocument CreditDocumentEnum (0..*) <"Specifies arrangements being made to provide credit.">
    organizationCharacteristic OrganizationCharacteristicEnum (0..*) <"Specifies the categories or characteristics that apply to an organization which allow it to apply for an end-user exception determination.">
    transactionCharacteristic TransactionCharacteristicEnum (0..*) <"Specifies the categories or characteristics that apply to a transaction which allow application of an end-user exception determination.">

type ESMAPartyInformation: <"Enriched party information required for reporting a transaction under ESMA EMIR.">
    natureOfParty NatureOfPartyEnum (1..1) <"Specifies the nature of the counterparty.">
    corporateSector CorporateSector (0..1) <"Specifies the corporate sector of the counterparty.">
    exceedsClearingThreshold boolean (0..1) <"Information whether the counterparty is above the clearing threshold referred to in Article 4(a)(3) or 10(3) of Regulation (EU) No 648/2012 at the moment when the transaction was concluded.">
    directlyLinkedActivity boolean (0..1) <"Directly linked to commercial activity or treasury financing. Information on whether the contract is objectively measurable as directly linked to the counterparty 1's commercial or treasury financing activity, as referred to in Article 10(3) of Regulation (EU) No 648/2012."> // TH Review: definition specific for EMIR but it's not jurisdiction specific in FpML    
    condition CorporateSector: <"Condition to ensure that the corporate sector of the counterparty is specified when required.">
        if natureOfParty = NatureOfPartyEnum -> Financial
                or natureOfParty = NatureOfPartyEnum -> NonFinancial
        then corporateSector exists
        else corporateSector is absent

    condition FinancialNonFinancial: <"At least a corporate sector must be provided matching the nature of the party.">
        if natureOfParty = NatureOfPartyEnum -> Financial
        then corporateSector -> financialSector exists
        else if natureOfParty = NatureOfPartyEnum -> NonFinancial
        then corporateSector -> nonFinancialSector exists

type FCAPartyInformation: <"Enriched party information required for reporting a transaction under FCA UK EMIR.">
    natureOfParty NatureOfPartyEnum (1..1) <"Specifies the nature of the counterparty.">
    corporateSector CorporateSector (0..1) <"Specifies the corporate sector of the counterparty.">
    exceedsClearingThreshold boolean (0..1) <"Information whether the counterparty is above the clearing threshold referred to in Article 4(a)(3) or 10(3) of Regulation (EU) No 648/2012 at the moment when the transaction was concluded.">
    directlyLinkedActivity boolean (0..1) <"Directly linked to commercial activity or treasury financing. Information on whether the contract is objectively measurable as directly linked to the counterparty 1's commercial or treasury financing activity, as referred to in Article 10(3) of Regulation (EU) No 648/2012.">

    condition CorporateSector: <"Condition to ensure that the corporate sector of the counterparty is specified when required.">
        if natureOfParty = NatureOfPartyEnum -> Financial
                or natureOfParty = NatureOfPartyEnum -> NonFinancial
        then corporateSector exists
        else corporateSector is absent

    condition FinancialNonFinancial: <"At least a corporate sector must be provided matching the nature of the party.">
        if natureOfParty = NatureOfPartyEnum -> Financial
        then corporateSector -> financialSector exists
        else if natureOfParty = NatureOfPartyEnum -> NonFinancial
        then corporateSector -> nonFinancialSector exists

type CorporateSector: <"Specifies the corporate sector of the counterparty.">
    financialSector FinancialSectorEnum (0..*) <"Specifies the ESMA EMIR Financial Sector of a counterparty.">
    nonFinancialSector NonFinancialSector (0..*) <"Specifies the ESMA EMIR Non Financial Sector of a counterparty.">

type NonFinancialSector: <"Specifies the ESMA Non Financial Sector of a counterparty and the ordinality of the relative importance of the corresponding activity.">
    ordinal int (1..1) <"Specifies the order of relative importance of each activity">
    nonFinancialSectorIndicator NonFinancialSectorEnum (1..1) <"Specifies the ESMA EMIR Non Financial Sector of a counterparty">

type SECPartyInformation: <"Enriched party information required for reporting a transaction to the CFTC.">
    entityClassification SECEntityClassificationEnum (1..1) <"Specifies the entity classification of a party under the U.S. Securities and Exchange Commission (SEC).">

type QuantityReportablePeriod:
    periodValue number (1..1)
    periodEffectiveDate date (1..1)
    periodEndDate date (0..1)

type PriceReportablePeriod:
    periodValue PriceAndNotation (1..1)
    periodEffectiveDate date (1..1)
    periodEndDate date (0..1)

type ReportableDelivery:
    deliveryStartTime time (0..1)
    deliveryEndTime time (0..1)
    deliveryStartDate ISODate (0..1)
    deliveryEndDate ISODate (0..1)
    duration iso20022.auth030.esma.DurationType1Code (0..1)
    daysOfTheWeek string (0..*)
    deliveryCapacity number (0..1)
    quantityUnit iso20022.auth030.esma.EnergyQuantityUnit2Code (0..1)
    priceTimeIntervalQuantity number (0..1)
    currencyOfThePriceTimeIntervalQuantity string (0..1)

type CommonTransactionReport: <"Common Transaction Report represents common attributes">
    reportingTimestamp zonedDateTime (1..1)
    reportSubmittingEntityID string (1..1)
    entityResponsibleForReporting iso20022.auth030.esma.LEIIdentifier (0..1)
    counterparty1 iso20022.auth030.esma.LEIIdentifier (1..1)
    natureOfCounterparty1 string (1..1)
    corporateSectorOfTheCounterparty1 string (0..1)
    clearingThresholdOfCounterparty1 boolean (0..1)
    counterparty2 Max72AlphaNumericText (0..1)
    countryOfTheCounterParty2 ISOCountryCodeEnum (0..1)
    natureOfCounterparty2 string (0..1)
    corporateSectorOfTheCounterparty2 string (0..1)
    counterparty2IdentifierType boolean (1..1)
    clearingMember iso20022.auth030.esma.LEIIdentifier (0..1)
    clearingThresholdOfCounterparty2 boolean (0..1)
    reportingObligationOfTheCounterparty2 boolean (1..1)
    brokerID iso20022.auth030.esma.LEIIdentifier (0..1)
    direction string (0..1)
    directionOfLeg1 string (0..1)
    directionOfLeg2 string (0..1)
    directlyLinkedToCommercialActivityOrTreasuryFinancing boolean (0..1)
    uti iso20022.auth030.esma.UTIIdentifier (1..1)
    reportTrackingNumber Max52AlphaNumericText (0..1)
    priorUTI string (0..1)
    ptrrId Max52UpperAlphaNumericText (0..1)
    packageIdentifier Max35AlphaNumericText (0..1)
    subsequentPositionUTI UTIIdentifierLegacy (0..1)
    isin iso20022.auth030.esma.ISINOct2015Identifier (0..1)
    upi string (0..1)
    productClassification iso20022.auth030.esma.CFIOct2015Identifier (1..1)
    contractType string (1..1)
    assetClass Max4Text (1..1)
    isCrypto boolean (1..1)
    underlyingIdentificationType Max1Text (0..1)
    underlyingIdentification iso20022.auth030.esma.ISINOct2015Identifier (0..1)
    nameOfTheUnderlyingIndex Max50AlphaNumericTextWithSplChars (0..*)
    underlyingIndexIndicator Max4Text (0..*)
    customBasketCode Max72AlphaNumericText (0..1)
    settlementCurrency1 string (0..1)
    settlementCurrency2 string (0..1)
    valuationAmount ShortFraction5DecimalNumber (0..1)
    valuationCurrency ISOCurrencyCodeEnum (0..1)
    valuationMethod iso20022.auth030.esma.ValuationType1Code (0..1)
    delta ShortFraction5DecimalNumber (0..1)
    valuationTimestamp zonedDateTime (0..1)
    confirmationTimestamp /*ISO*/ zonedDateTime (0..1)
    confirmed string (0..1)
    clearingObligation string (0..1)
    cleared Max1Text (1..1) // Field 2.31
    clearingTimestamp zonedDateTime (0..1)
    centralCounterparty iso20022.auth030.esma.LEIIdentifier (0..1) // Field 2.33
    masterAgreementType string (1..1)
    otherMasterAgreementType Max50AlphaNumericText (0..1)
    masterAgreementVersion int (0..1)
    intragroup boolean (0..1)
    ptrr boolean (0..1)
    typeOfPTRRTechnique string (0..1)
    ptrrServiceProvider iso20022.auth030.esma.LEIIdentifier (0..1)
    venueOfExecution string (0..1)
    executionTimestamp /*ISO*/ zonedDateTime (1..1)
    effectiveDate iso20022.auth030.esma.ISODate (1..1)
    expirationDate iso20022.auth030.esma.ISODate (0..1)
    earlyTerminationDate date (0..1)
    finalContractualSettlementDate date (0..1)
    deliveryType string (1..1)
    notionalLeg1 ShortFraction5DecimalNumber (0..1)
    notionalCurrency1 ISOCurrencyCodeEnum (1..1)
    totalNotionalQuantityLeg1 ShortFraction5DecimalNumber (0..1)
    totalNotionalQuantityLeg2 ShortFraction5DecimalNumber (0..1)
    notionalLeg2 ShortFraction5DecimalNumber (0..1)
    notionalCurrency2 ISOCurrencyCodeEnum (0..1)
    fixedRateOfLeg1 Max11Number (0..1)
    fixedRateDayCountConventionLeg1 iso20022.auth030.esma.InterestComputationMethod4Code (0..1)
    fixedRatePaymentFrequencyPeriodLeg1 Max4Text (0..1)
    fixedRatePaymentFrequencyPeriodMultiplierLeg1 iso20022.auth030.esma.Max3Number (0..1)
    identifierOfFloatingRateOfLeg1 iso20022.auth030.esma.ISINOct2015Identifier (0..1)
    indicatorOfTheFloatingRateOfLeg1 Max4Text (0..1)
    nameOfTheFloatingRateOfLeg1 Max50AlphaNumericText (0..1)
    floatingRateDayCountConventionOfLeg1 iso20022.auth030.esma.InterestComputationMethod4Code (0..1)
    floatingRatePaymentFrequencyPeriodOfLeg1 iso20022.auth030.esma.Frequency13Code__1 (0..1)
    floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 iso20022.auth030.esma.Max3Number (0..1)
    floatingRateReferencePeriodOfLeg1TimePeriod Max4Text (0..1)
    floatingRateReferencePeriodOfLeg1Multiplier iso20022.auth030.esma.Max3Number (0..1)
    floatingRateResetFrequencyPeriodOfLeg1 Max4Text (0..1)
    floatingRateResetFrequencyPeriodMultiplierLeg1 iso20022.auth030.esma.Max3Number (0..1)
    fixedRateOfLeg2 Max11Number (0..1)
    fixedRateDayCountConventionLeg2 iso20022.auth030.esma.InterestComputationMethod4Code (0..1)
    fixedRatePaymentFrequencyPeriodLeg2 Max4Text (0..1)
    fixedRatePaymentFrequencyPeriodMultiplierLeg2 iso20022.auth030.esma.Max3Number (0..1)
    identifierOfFloatingRateOfLeg2 iso20022.auth030.esma.ISINOct2015Identifier (0..1)
    indicatorOfTheFloatingRateOfLeg2 Max4Text (0..1)
    nameOfTheFloatingRateOfLeg2 Max50AlphaNumericText (0..1)
    floatingRateDayCountConventionOfLeg2 iso20022.auth030.esma.InterestComputationMethod4Code (0..1)
    floatingRatePaymentFrequencyPeriodOfLeg2 string (0..1)
    floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 iso20022.auth030.esma.Max3Number (0..1)
    floatingRateReferencePeriodOfLeg2TimePeriod Max4Text (0..1)
    floatingRateReferencePeriodOfLeg2Multiplier iso20022.auth030.esma.Max3Number (0..1)
    floatingRateResetFrequencyPeriodOfLeg2 Max4Text (0..1)
    floatingRateResetFrequencyPeriodMultiplierLeg2 iso20022.auth030.esma.Max3Number (0..1)
    exchangeRate Max18D13Number (0..1)
    forwardExchangeRate Max18D13Number (0..1)
    exchangeRateBasis ExchangeRateBasisStringFormat (0..1)
    baseProduct string (0..1)
    subProduct string (0..1)
    furtherSubProduct string (0..1)
    optionType Max4Text (0..1)
    optionStyle Max4Text (0..1)
    optionPremiumAmount ShortFraction5DecimalNumber (0..1)
    optionPremiumCurrency ISOCurrencyCodeEnum (0..1)
    optionPremiumPaymentDate date (0..1)
    maturityDateOfTheUnderlying date (0..1)
    seniority Max4Text (0..1)
    referenceEntity string (0..1)
    series Max5Int (0..1)
    version Max5Int (0..1)
    indexFactor ShortFraction10DecimalNumber (0..1)
    tranche boolean (0..1)
    cdSIndexAttachmentPoint ShortFraction10DecimalNumber (0..1)
    cdSIndexDetachmentPoint ShortFraction10DecimalNumber (0..1)
    collateralPortfolioIndicator boolean (0..1)
    collateralPortfolioCode Max52AlphaNumericText (0..1)
    eventType string (0..1)
    eventDate iso20022.auth030.esma.ISODate (1..1)
    level string (1..1)
    actionType string (1..1)

type CommonPartiesReport: <"Common Parties Report represents common party attributes used in Margin Report">
    reportingTimestamp zonedDateTime (1..1)
    entityResponsibleForReporting LEIIdentifier (0..1)
    counterparty1 LEIIdentifier (1..1)
    counterparty2IdentifierType boolean (0..1)
    counterparty2 Max72AlphaNumericText (0..1)

type CommonCollateralReport: <"Common Margin Report represents common Margin report attributes">
    uti CollateralUTIString (0..1)
    collateralPortfolioIndicator boolean (0..1)
    collateralisationCategory CollateralisationType3Code__1 (0..1)
    initialMarginPostedByTheCounterparty1PreHaircut ShortFraction5DecimalNumber (0..1)
    initialMarginPostedByTheCounterparty1PostHaircut ShortFraction5DecimalNumber (0..1)
    initialMarginPostedByCounterparty1Currency ISOCurrencyCodeEnum (0..1)
    variationMarginPostedByTheCounterparty1PreHaircut ShortFraction5DecimalNumber (0..1)
    variationMarginPostedByTheCounterparty1PostHaircut ShortFraction5DecimalNumber (0..1)
    variationMarginPostedByCounterparty1Currency ISOCurrencyCodeEnum (0..1)
    initialMarginCollectedByCounterparty1PreHaircut ShortFraction5DecimalNumber (0..1)
    initialMarginCollectedByCounterparty1PostHaircut ShortFraction5DecimalNumber (0..1)
    initialMarginCollectedByCounterparty1Currency ISOCurrencyCodeEnum (0..1)
    variationMarginCollectedByTheCounterparty1PreHaircut ShortFraction5DecimalNumber (0..1)
    variationMarginCollectedByTheCounterparty1PostHaircut ShortFraction5DecimalNumber (0..1)
    variationMarginCollectedByCounterparty1Currency ISOCurrencyCodeEnum (0..1)
    excessCollateralPostedByTheCounterparty1 ShortFraction5DecimalNumber (0..1)
    currencyOfTheExcessCollateralPosted string (0..1)
    excessCollateralCollectedByTheCounterparty1 ShortFraction5DecimalNumber (0..1)
    currencyOfTheExcessCollateralCollected string (0..1)
    actionType MarginActionEnum (0..1)
    eventDate date (1..1)

type DeliveryCapacity:
    amount number (0..1)
    unit iso20022.auth030.esma.EnergyQuantityUnit2Code (0..1)

typeAlias BasisFormat: <"Prices expressed as a Basis points, for example, 0.0007 is 7.">
    number(digits: 5)

typeAlias Max20D19Number: <"Represents as 20 digit number with support for 19 decimal">
    number(digits: 20, fractionalDigits: 19)

typeAlias Max11Number: <"Represents as 11 digit number with support for 10 decimal">
    number(digits: 11, fractionalDigits: 10)

typeAlias Max21D10Number: <"Represents as 21 digit number with support for 10 decimal">
    number(digits: 21, fractionalDigits: 10)

typeAlias Max30D5Number: <"Represents as 30 digit number with support for 5 decimal">
    number(digits: 30, fractionalDigits: 5)

typeAlias Max31D13Number: <"Represents as 31 digit number with support for 13 decimal">
    number(digits: 31, fractionalDigits: 13)

typeAlias Max18D13Number: <"Represents as 18 digit number with support for 13 decimal">
    number(digits: 18, fractionalDigits: 13)

typeAlias ExchangeRateBasisStringFormat: <"This shall contain 7 characters representing two currency codes separated by / .">
    string(minLength: 7, maxLength: 7, pattern: "[A-Z]{3,3}/[A-Z]{3,3}")

typeAlias Max35AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 35 characters.">
    string(minLength: 1, maxLength: 35, pattern: "[a-zA-Z0-9]{1,35}")

typeAlias Max50AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 50 characters.">
    string(minLength: 1, maxLength: 50, pattern: "[a-zA-Z0-9]{1,50}")

typeAlias Max52AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 52 characters.">
    string(minLength: 1, maxLength: 52, pattern: "[a-zA-Z0-9]{1,52}")

typeAlias Max100AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 100 characters.">
    string(minLength: 1, maxLength: 100, pattern: "[a-zA-Z0-9]{1,52}")

typeAlias Max72AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 72 characters.">
    string(minLength: 20, maxLength: 72, pattern: "[a-zA-Z0-9]{1,72}")

typeAlias Max105AlphaNumericText: <"Specifies an alphanumeric string with a maximum length of 72 characters.">
    string(minLength: 1, maxLength: 105, pattern: "[a-zA-Z0-9]{1,105}")

typeAlias Max50AlphaNumericTextWithSplChars: <"Specifies an alphanumeric string with a maximum length of 50 characters.">
    string(minLength: 1, maxLength: 50, pattern: "[a-zA-Z0-9 \\:.\\-_]{1,50}")

typeAlias UTIdentifier: <"Unique Transaction Identifier (UTI). Unique number allocated to a financial transaction as agreed among the parties and/or within the regulatory system under which it is formed. The UTI is described in the latest edition of the international standard ISO 23897:2020.">
	string(pattern: "[A-Z0-9]{18}[0-9]{2}[A-Z0-9  \\:.\\-_]{0,32}") //UT Identifier with Special Characters

typeAlias Max1Text: <"Specifies an alphabetical string with a maximum length of 1 character.">
    string(minLength: 1, maxLength: 1, pattern: "[a-zA-Z]")

typeAlias Max4Text: <"Specifies an string with a maximum length of 4 characters.">
    string(minLength: 1, maxLength: 4)

typeAlias NumericChar1to4: <"Specifies a character string with a maximum length of 1 character. Allowable Values: [1, 2, 3, 4]. To be used for Notation fields">
    string(minLength: 1, maxLength: 1, pattern: "[1-4]")

typeAlias ShortFraction5DecimalNumber: <"Specifies a number with a maximum length of 25 numeric characters including up to 5 decimals.">
    number(digits: 25, fractionalDigits: 5)

typeAlias Max5Int: <"Number (max 99999) of objects represented as an integer.">
    int(digits: 5)

typeAlias ShortFraction10DecimalNumber: <"Specifies a number with a maximum length of 11 numeric characters including up to 10 decimals.">
    number(digits: 11, fractionalDigits: 10)

typeAlias CollateralUTIString: <"max 52 alphanumerical characters. Four special characters are allowed ':', '.',  '-', '_' .  Special characters not allowed at the beginning or the end">
    string(maxLength: 52, pattern: "[a-zA-Z0-9]{1}[a-zA-Z0-9\\:.\\-_]{0,50}[a-zA-Z0-9]{1}")

typeAlias UTIIdentifierLegacy: <"Unique Transaction Identifier (UTI), legacy format accepting special characters: max 52 alphanumerical characters. Four special characters are allowed ':', '.',  '-', '_' .  Special characters not allowed at the beginning or the end">
    string(maxLength: 52, pattern: "[a-zA-Z0-9]{1}[a-zA-Z0-9\\:.\\-_]{0,50}[a-zA-Z0-9]{1}")

type PayoutLeg:
    creditDefaultPayout CreditDefaultPayout (0..1)
    optionPayout OptionPayout (0..1)
    forwardPayout ForwardPayout (0..1)
    performancePayout PerformancePayout (0..1)
    interestRatePayout InterestRatePayout (0..1)
    cashflow Cashflow (0..1)
    fixedPricePayout FixedPricePayout (0..1)
    commodityPayout CommodityPayout (0..1)
    condition: one-of

type PayoutLegWithAuxiliary extends PayoutLeg:
    auxiliaryLeg PayoutLeg (0..1)
    lastAvailableSpotPrice PriceSchedule (0..1)
    tradeLot TradeLot (0..1)
    isProductETD boolean (0..1)

    condition FixedOrCommodityPayout:
        auxiliaryLeg -> fixedPricePayout only exists or auxiliaryLeg -> commodityPayout only exists
