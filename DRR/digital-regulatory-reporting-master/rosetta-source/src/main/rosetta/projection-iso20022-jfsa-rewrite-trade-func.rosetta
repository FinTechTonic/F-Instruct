namespace drr.projection.iso20022.jfsa.rewrite.trade
version "${project.version}"

import cdm.base.staticdata.asset.common.*

import drr.projection.iso20022.common.*
import drr.regulation.common.*
import drr.regulation.common.util.*
import drr.regulation.jfsa.rewrite.trade.JFSATransactionReport
import drr.standards.iso.*

import iso20022.auth030.jfsa.*

func Project_JFSARewriteTradeReportToIso20022:
    [projection]
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradRpt -> rptHdr: Create_TradeReportHeader

    set iso20022Report -> derivsTradRpt -> tradData -> rpt:
        Create_TradeReport32Choice__1(drrReport)

func Create_TradeReportHeader:
    output:
        rptHdr TradeReportHeader4__1 (1..1)

    set rptHdr:
        TradeReportHeader4__1 {
            nbRcrds: 1,
            ...
        }

func Create_TradeReport32Choice__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        rpt TradeReport32Choice__1 (1..1)

    alias actionType: drrReport -> actionType

    set rpt:
        TradeReport32Choice__1 {
            new: if actionType = ActionTypeEnum -> NEWT to-string
                then TradeData42__1 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__1(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            mod: if actionType = ActionTypeEnum -> MODI to-string
                then TradeData42__2 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__2(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            crrctn: if actionType = ActionTypeEnum -> CORR to-string
                then TradeData42__3 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__3(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            termntn: if actionType = ActionTypeEnum -> TERM to-string
                then TradeData42__4 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__4(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            valtnUpd: if actionType = ActionTypeEnum -> VALU to-string
                then TradeData42__5 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__5(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            err: if actionType = ActionTypeEnum -> EROR to-string
                then TradeData42__6 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__6(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            portOut: if actionType = ActionTypeEnum -> POSC to-string // Is this correct?
                then TradeData42__7 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__7(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            rvv: if actionType = ActionTypeEnum -> REVI to-string
                then TradeData42__3 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__3(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    }
        }

// CounterpartySpecificData36
func Create_CounterpartySpecificData36__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__1 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__1 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__2 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__2 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            valtn: ContractValuationData8__1 {
                    ctrctVal: AmountAndDirection109__1 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> valuationAmount,
                                    ccy: drrReport -> valuationCurrency to-string
                                },
                            ...
                        },
                    tmStmp: drrReport -> valuationTimestamp,
                    tp: drrReport -> valuationMethod to-string to-enum ValuationType1Code,
                    ...
                },
            rptgTmStmp: drrReport -> reportingTimestamp
        }

// TradeCounterpartyReport20
func Create_TradeCounterpartyReport20__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__1 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                    id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                    drctnOrSd: Direction4Choice {
                            ctrPtySd: drrReport -> direction1 to-enum OptionParty1Code,
                            drctn: Direction2 {
                                    drctnOfTheFrstLeg: drrReport -> direction2Leg1 to-enum OptionParty3Code,
                                    drctnOfTheScndLeg: drrReport -> direction2Leg2 to-enum OptionParty3Code
                                }
                        },
                },
            othrCtrPty: Counterparty46__1 {
                    idTp: Create_PartyIdentification248Choice__2(drrReport),
                },
            submitgAgt: GetSubmitgAgt(drrReport),
            clrMmb: Create_PartyIdentification248Choice__1(drrReport -> clearingMember),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func Create_TradeCounterpartyReport20__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__2 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__2 {
                    id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1)
                },
            othrCtrPty: Counterparty46__1 {
                    idTp: Create_PartyIdentification248Choice__2(drrReport)
                },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func GetSubmitgAgt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        submitgAgt OrganisationIdentification15Choice__1 (1..1)

    set submitgAgt:
        Create_OrganisationIdentification15Choice__1(drrReport -> submitterIdentifier)

func GetNttyRspnsblForRpt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        nttyRspnsblForRpt OrganisationIdentification15Choice__1 (1..1)

    set nttyRspnsblForRpt:
        Create_OrganisationIdentification15Choice__1(
                drrReport -> entityResponsibleForReporting
            )

// PartyIdentification248Choice
func Create_PartyIdentification248Choice__1:
    inputs:
        lei string (1..1)
    output:
        id PartyIdentification248Choice__1 (1..1)

    set id:
        PartyIdentification248Choice__1 {
            lgl: LegalPersonIdentification1__1 {
                    id: Create_OrganisationIdentification15Choice__1(lei)
                }
        }

func Create_PartyIdentification248Choice__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        id PartyIdentification248Choice__2 (1..1)

    set id:
        PartyIdentification248Choice__2 {
            lgl: if drrReport -> counterparty2IdentifierType = True
                then LegalPersonIdentification1__2 {
                        id: OrganisationIdentification15Choice__2 {
                                lei: drrReport -> counterparty2,
                                ...
                            }
                    },
            ntrl: if drrReport -> counterparty2IdentifierType = False
                then NaturalPersonIdentification3__1 {
                        id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                        id: drrReport -> counterparty2
                                    }
                            }
                    }
        }

// OrganisationIdentification15Choice
func Create_OrganisationIdentification15Choice__1:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__1 (1..1)

    set id:
        OrganisationIdentification15Choice__1 {
            lei: lei
        }

// CommonTradeDataReport69
func Create_CommonTradeDataReport69__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__1 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__1 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__1(drrReport)
        }

func Create_CommonTradeDataReport69__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__2 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__2 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__2(drrReport)
        }

func Create_CommonTradeDataReport69__3:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__3 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__3 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__3(drrReport)
        }

func Create_CommonTradeDataReport69__4:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__4 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__4 {
            txData: Create_TradeTransaction49__4(drrReport),
            ctrctData: Create_ContractType14__2(drrReport)
        }

func Create_CommonTradeDataReport69__5:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__5 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__5 {
            txData: Create_TradeTransaction49__5(drrReport)
        }

func Create_CommonTradeDataReport69__6:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__6 {
            txData: Create_TradeTransaction49__6(drrReport),
            ctrctData: Create_ContractType14__2(drrReport)
        }

func Create_CommonTradeDataReport69__7:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__7 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__7 {
            txData: Create_TradeTransaction49__7(drrReport),
            ctrctData: Create_ContractType14__2(drrReport)
        }

// ContractType14
func Create_ContractType14__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrctData ContractType14__1 (1..1)

    set ctrctData:
        ContractType14__1 {
            pdctId: GetPdctId(drrReport),
            ctrctTp: GetCtrctTp(drrReport),
            asstClss: GetAsstClss(drrReport),
            derivBasedOnCrptAsst: GetDerivBasedOnCrptAsst(drrReport),
            undrlygInstrm: GetUndrlygInstrm(drrReport),
            sttlmCcy: GetSttlmCcy(drrReport),
            sttlmCcyScndLeg: GetSttlmCcyScndLeg(drrReport)
        }

func Create_ContractType14__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrctData ContractType14__2 (1..1)

    set ctrctData:
        ContractType14__2 {
            pdctId: GetPdctId(drrReport),
            ctrctTp: GetCtrctTp(drrReport),
            asstClss: GetAsstClss(drrReport),
            derivBasedOnCrptAsst: GetDerivBasedOnCrptAsst(drrReport),
            undrlygInstrm: GetUndrlygInstrm(drrReport),
            sttlmCcy: GetSttlmCcy(drrReport),
            sttlmCcyScndLeg: GetSttlmCcyScndLeg(drrReport)
        }

func GetPdctId:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        pdctId SecurityIdentification46__1 (1..1)

    set pdctId:
        SecurityIdentification46__1 {
            unqPdctIdr: UniqueProductIdentifier2Choice__1 {
//                    id: drrReport -> upi
                    ...
                }
        }

func GetCtrctTp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ctrctTp FinancialInstrumentContractType2Code (1..1)

    set ctrctTp: drrReport -> contractType to-enum FinancialInstrumentContractType2Code

func GetAsstClss:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        asstClss ProductType4Code__1 (1..1)

    set asstClss: drrReport -> assetClass to-enum ProductType4Code__1

func GetDerivBasedOnCrptAsst:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        derivBasedOnCrptAsst TrueFalseIndicator (1..1)

    set derivBasedOnCrptAsst: drrReport -> isCrypto

func GetUndrlygInstrm:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        undrlygInstrm SecurityIdentification41Choice__1 (1..1)

    set undrlygInstrm:
        SecurityIdentification41Choice__1 {
            isin: if drrReport -> underlyingIdentificationType = "I"
                then drrReport -> underlyingIdentification,
            indx: IndexIdentification1__1 {
                    indx: if drrReport -> underlyingIdentificationType = "X"
                        then drrReport -> underlyingIndexIndicator to-string,
                    nm: if drrReport -> underlyingIdentificationType = "X"
                        then drrReport -> nameOfTheUnderlyingIndex,
                    ...
                },
            bskt: CustomBasket4__1 {
                    id: drrReport -> customBasketCode,
                    cnsttnts: drrReport -> basketConstituents extract BasketConstituents3__1 {
                            instrmId: InstrumentIdentification6Choice__1 {
                                    isin: if item -> source = ProductIdTypeEnum -> ISIN
                                        then item -> identifier,
                                    othrId: GenericIdentification184 {
                                            id: if item -> source <> ProductIdTypeEnum -> ISIN
                                                then item -> identifier,
                                            src: if item -> source <> ProductIdTypeEnum -> ISIN
                                                then item -> source
                                                    to-string
                                        }
                                }
                        },
                    ...
                }
        }

func GetSttlmCcy:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        sttlmCcy CurrencyExchange23__1 (1..1)

    set sttlmCcy:
        CurrencyExchange23__1 {
            ccy: drrReport -> settlementCurrencyLeg1 to-string,
            ...
        }

func GetSttlmCcyScndLeg:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        sttlmCcyScndLeg CurrencyExchange23__1 (1..1)

    set sttlmCcyScndLeg:
        CurrencyExchange23__1 {
            ccy: drrReport -> settlementCurrencyLeg2 to-string,
            ...
        }

// TradeTransaction49
func Create_TradeTransaction49__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__1 (1..1)

    set txData:
        TradeTransaction49__1 {
            txId: GetTxId(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric1(drrReport),
            ntnlAmt: GetNtnlAmt1(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr1(drrReport),
            intrstRate: GetIntrstRate1(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn1(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__2 (1..1)

    set txData:
        TradeTransaction49__2 {
            txId: GetTxId(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric1(drrReport),
            ntnlAmt: GetNtnlAmt1(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr1(drrReport),
            intrstRate: GetIntrstRate2(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn1(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__3:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__3 (1..1)

    set txData:
        TradeTransaction49__3 {
            txId: GetTxId(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            earlyTermntnDt: drrReport -> earlyTerminationDate,
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric1(drrReport),
            ntnlAmt: GetNtnlAmt1(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr1(drrReport),
            intrstRate: GetIntrstRate2(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn1(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__4:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__4 (1..1)

    set txData:
        TradeTransaction49__4 {
            txId: GetTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            earlyTermntnDt: drrReport -> earlyTerminationDate,
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric2(drrReport),
            ntnlAmt: GetNtnlAmt2(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr1(drrReport),
            intrstRate: GetIntrstRate2(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn2(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__5:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__5 (1..1)

    set txData:
        TradeTransaction49__5 {
            txId: GetTxId(drrReport)
        }

func Create_TradeTransaction49__6:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__6 (1..1)

    set txData:
        TradeTransaction49__6 {
            txId: GetTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric2(drrReport),
            ntnlAmt: GetNtnlAmt2(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr2(drrReport),
            intrstRate: GetIntrstRate3(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn2(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__7:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txData TradeTransaction49__7 (1..1)

    set txData:
        TradeTransaction49__7 {
            txId: GetTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: [], // GetPltfmIdr(drrReport), //TH: The expected input does not belong to JFSA
            txPric: GetTxPric2(drrReport),
            ntnlAmt: GetNtnlAmt2(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr2(drrReport),
            intrstRate: GetIntrstRate2(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn2(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

// TradeTransaction49 helper funcs
func GetTxId:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txId UniqueTransactionIdentifier2Choice__1 (1..1)

    set txId:
        UniqueTransactionIdentifier2Choice__1 {
            unqTxIdr: drrReport -> uti,
            prtry: GenericIdentification175__1 {
                    id: drrReport -> utiProprietary
                }
        }

func GetPrrTxId:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        prrTxId UniqueTransactionIdentifier3Choice__1 (1..1)

    set prrTxId:
        UniqueTransactionIdentifier3Choice__1 {
            unqTxIdr: drrReport -> priorUti,
            prtry: GenericIdentification175__1 {
                    id: drrReport -> priorUtiProprietary
                }
        }

func GetCollPrtflCd:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        collPrtflCd CollateralPortfolioCode5Choice__1 (1..1)

    set collPrtflCd:
        CollateralPortfolioCode5Choice__1 {
            mrgnPrtflCd: MarginPortfolio3__1 {
                    initlMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: PortfolioIdentification3__1 {
                                    cd: if drrReport -> collateralPortfolioIndicator = True
                                                and drrReport -> initialMarginCollateralPortfolioCode exists
                                        then drrReport -> initialMarginCollateralPortfolioCode
                                },
                            noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                                        or (drrReport -> collateralPortfolioIndicator = True and drrReport -> initialMarginCollateralPortfolioCode exists) = False
                                then NotApplicable1Code -> NOAP
                        },
                    vartnMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: PortfolioIdentification3__1 {
                                    cd: if drrReport -> collateralPortfolioIndicator = True
                                                and drrReport -> variationMarginCollateralPortfolioCode exists
                                        then drrReport -> variationMarginCollateralPortfolioCode
                                },
                            noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                                        or (drrReport -> collateralPortfolioIndicator = True and drrReport -> variationMarginCollateralPortfolioCode exists) = False
                                then NotApplicable1Code -> NOAP
                        }
                }
        }

/*func GetRptTrckgNb: //TH: This field does not belong to JFSA jurisdiction
 *     inputs:
 *         drrReport JFSATransactionReport (1..1)
 *     output:
 *         rptTrckgNb Max52Text (1..1)

 set rptTrckgNb: drrReport -> reportTrackingNumber*/
/*func GetPltfmIdr: //TH: This field does not belong to JFSA jurisdiction
 *     inputs:
 *         drrReport JFSATransactionReport (1..1)
 *     output:
 *         pltfmIdr MICIdentifier (1..1)

 set pltfmIdr: drrReport -> venueOfExecution*/
func GetTxPric1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txPric PriceData2__1 (1..1)

    set txPric:
        PriceData2__1 {
            pric: GetPric(drrReport),
            schdlPrd: drrReport -> priceSchedule
                    extract
                        Schedule1__1 {
                            uadjstdFctvDt: effectiveDate,
                            uadjstdEndDt: endDate,
                            pric: SecuritiesTransactionPrice17Choice__1 {
                                    mntryVal: AmountAndDirection106__1 {
                                            amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                    value: priceMonetary,
                                                    ccy: drrReport -> price -> priceCurrency to-string
                                                },
                                            ...
                                        },
                                    dcml: pricePercentage
                                }
                        },
            unitOfMeasr: Create_UnitOfMeasure8Choice__1(drrReport -> priceUnitOfMeasure)
        }

func GetTxPric2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        txPric PriceData2__2 (1..1)

    set txPric:
        PriceData2__2 {
            pric: GetPric(drrReport),
            unitOfMeasr: Create_UnitOfMeasure8Choice__1(drrReport -> priceUnitOfMeasure)
        }

func GetPric:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        pric SecuritiesTransactionPrice17Choice__1 (1..1)

    set pric:
        drrReport -> price
            extract
                SecuritiesTransactionPrice17Choice__1 {
                    mntryVal: if priceNotation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: priceMonetary,
                                        ccy: drrReport -> price -> priceCurrency to-string
                                    },
                                ...
                            },
                    dcml: if priceNotation = PriceNotationEnum -> Percentage
                        then pricePercentage
                }

func Create_UnitOfMeasure8Choice__1:
    inputs:
        unitOfMeasure string (1..1)
    output:
        unitOfMeasr UnitOfMeasure8Choice__1 (1..1)

    set unitOfMeasr:
        UnitOfMeasure8Choice__1 {
            cd: unitOfMeasure
        }

func GetNtnlAmt1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__1 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__1 {
            frstLeg: NotionalAmount5__1 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg1,
                                    ccy: drrReport -> notionalCurrencyOfLeg1 to-string
                                }
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg1
                            extract
                                Schedule11__1 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__2 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyOfLeg1 to-string
                                                }
                                        },
                                    ...
                                }
                },
            scndLeg: NotionalAmount6__1 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg2,
                                    ccy: drrReport -> notionalCurrencyOfLeg2 to-string
                                }
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg2
                            extract
                                Schedule11__1 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__2 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyOfLeg2 to-string
                                                }
                                        },
                                    ...
                                }
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlAmt2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__2 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__2 {
            frstLeg: NotionalAmount5__2 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg1,
                                    ccy: drrReport -> notionalCurrencyOfLeg1 to-string
                                }
                        },
                },
            scndLeg: NotionalAmount6__2 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg2,
                                    ccy: drrReport -> notionalCurrencyOfLeg2 to-string
                                }
                        },
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlQty:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__1 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__1 {
            frstLeg: NotionalQuantity9__1 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg1,
                    unitOfMeasr: empty, // UnitOfMeasure8Choice__1
                    dtls: QuantityOrTerm1Choice__1 {
                            schdlPrd: drrReport -> notionalQuantityScheduleLeg1
                                    extract
                                        Schedule10__1 {
                                            uadjstdFctvDt: effectiveDate,
                                            uadjstdEndDt: endDate,
                                            qty: value
                                        }
                        }
                },
            scndLeg: NotionalQuantity9__1 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg2,
                    ...
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlQty2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__2 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__2 {
            frstLeg: NotionalQuantity9__2 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg1,
                    unitOfMeasr: empty // UnitOfMeasure8Choice__1
                },
            scndLeg: NotionalQuantity9__2 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg2,
                    unitOfMeasr: empty // UnitOfMeasure8Choice__1
                }
        // TODO: Notional Amount End Date
        }

func GetDlvryTp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        dlvryTp PhysicalTransferType4Code (1..1)

    set dlvryTp: drrReport -> deliveryType to-enum PhysicalTransferType4Code

func GetExctnTmStmp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        exctnTmStmp zonedDateTime (1..1)

    set exctnTmStmp: drrReport -> executionTimestamp

func GetFctvDt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fctvDt ISODate (1..1)

    set fctvDt: drrReport -> effectiveDate

func GetXprtnDt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        xprtnDt ISODate (1..1)

    set xprtnDt: drrReport -> expirationDate

func GetSttlmDt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        sttlmDt date (1..1)

    set sttlmDt: drrReport -> finalContractualSettlementDate

/*func GetPstTradRskRdctnFlg: //TH: This field does not belong to JFSA jursidiction
 *     inputs:
 *         drrReport JFSATransactionReport (1..1)
 *     output:
 *         pstTradRskRdctnFlg TrueFalseIndicator (1..1)

 set pstTradRskRdctnFlg: drrReport -> ptrr*/
// DerivativeEvent6
func GetDerivEvt1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__1 (1..1)

    set derivEvt:
        DerivativeEvent6__1 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp1(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__2 (1..1)

    set derivEvt:
        DerivativeEvent6__2 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt3:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__3 (1..1)

    set derivEvt:
        DerivativeEvent6__3 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvtId:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        id EventIdentifier1Choice__1 (1..1)

    set id:
        EventIdentifier1Choice__1 {
            evtIdr: [] // drrReport -> ptrrId //TH: This field does not belong to JFSA jurisdiction
        }

func GetDerivEvtTp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tp DerivativeEventType3Code (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code

func GetDerivEvtTp1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__1 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__1

func GetDerivEvtTmStmp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tmStmp DateAndDateTime2Choice__1 (1..1)

    set tmStmp:
        DateAndDateTime2Choice__1 {
            dtTm: drrReport -> eventTimestamp
        }

func GetTradConf:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tradConf TradeConfirmation1Choice (1..1)

    set tradConf:
        TradeConfirmation1Choice {
            confd: TradeConfirmation2 {
                    tmStmp: if drrReport -> confirmed <> "NCNF"
                        then drrReport -> confirmationTimestamp,
                    tp: if drrReport -> confirmed <> "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType1Code
                },
            nonConfd: TradeNonConfirmation1 {
                    tp: if drrReport -> confirmed = "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType2Code
                }
        }

func GetTradClr1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tradClr TradeClearing11__1 (1..1)

    set tradClr:
        TradeClearing11__1 {
            clrSts: Cleared23Choice__1 {
                    clrd: if drrReport -> cleared = "Y"
                        then ClearingPartyAndTime21Choice__1 {
                                dtls: ClearingPartyAndTime22__1 {
                                        ccp: Create_OrganisationIdentification15Choice__1(
                                                    drrReport -> centralCounterparty
                                                ),
                                        clrAcctOrgn: drrReport -> clearingAccountOrigin to-enum ClearingAccountType4Code,
                                        orgnlIdr: UniqueTransactionIdentifier2Choice__1 {
                                                unqTxIdr: drrReport -> originalSwapUTI,
                                                ...
                                            },
                                        ...
                                    }
                            },
                    nonClrd: if drrReport -> cleared = "N"
                        then ClearingExceptionOrExemption3Choice__1 {
                                rsn: NoReasonCode -> NORE
                            },
                    ...
                },
        // intraGrp: drrReport -> intragroup
        }

func GetTradClr2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tradClr TradeClearing11__2 (1..1)

    set tradClr:
        TradeClearing11__2 {
            clrSts: Cleared23Choice__2 {
                    clrd: if drrReport -> cleared = "Y"
                        then ClearingPartyAndTime21Choice__2 {
                                dtls: ClearingPartyAndTime22__2 {
                                        ccp: Create_OrganisationIdentification15Choice__1(
                                                    drrReport -> centralCounterparty
                                                ),
                                        clrAcctOrgn: drrReport -> clearingAccountOrigin to-enum ClearingAccountType4Code,
                                        orgnlIdr: UniqueTransactionIdentifier2Choice__1 {
                                                unqTxIdr: drrReport -> originalSwapUTI,
                                                ...
                                            },
                                        ...
                                    }
                            },
                    nonClrd: if drrReport -> cleared = "N"
                        then ClearingExceptionOrExemption3Choice__1 {
                                rsn: NoReasonCode -> NORE
                            },
                    ...
                },
        }

func GetIntrstRate1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__1 (1..1)

    set intrstRate:
        InterestRateLegs14__1 {
            frstLeg: InterestRate33Choice__1 {
                    fxd: Create_FixedRateLeg1(drrReport),
                    fltg: Create_FloatingRateLeg1(drrReport)
                },
            scndLeg: InterestRate33Choice__2 {
                    fxd: Create_FixedRateLeg2(drrReport),
                    fltg: Create_FloatingRate2Leg2(drrReport)
                },
        }

func GetIntrstRate2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__2 (1..1)

    set intrstRate:
        InterestRateLegs14__2 {
            frstLeg: InterestRate33Choice__1 {
                    fxd: Create_FixedRateLeg1(drrReport),
                    fltg: Create_FloatingRateLeg1(drrReport)
                },
            scndLeg: InterestRate33Choice__1 {
                    fxd: Create_FixedRateLeg2(drrReport),
                    fltg: Create_FloatingRateLeg2(drrReport)
                },
        }

func GetIntrstRate3:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__3 (1..1)

    set intrstRate:
        InterestRateLegs14__3 {
            frstLeg: InterestRate33Choice__3 {
                    fxd: Create_FixedRateLeg1(drrReport),
                    fltg: Create_FloatingRate3Leg2(drrReport)
                },
            scndLeg: InterestRate33Choice__1 {
                    fxd: Create_FixedRateLeg2(drrReport),
                    fltg: Create_FloatingRateLeg2(drrReport)
                },
        }

func Create_FixedRateLeg1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fxd FixedRate10__1 (1..1)

    set fxd:
        Create_FixedRate10__1(
                drrReport -> fixedRateLeg1,
                drrReport -> fixedRateDayCountConventionLeg1 to-string,
                drrReport -> fixedRatePaymentFrequencyPeriodLeg1,
                drrReport -> fixedRatePaymentFrequencyPeriodMultiplierLeg1
            )

func Create_FixedRateLeg2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fxd FixedRate10__1 (1..1)

    set fxd:
        Create_FixedRate10__1(
                drrReport -> fixedRateLeg2,
                drrReport -> fixedRateDayCountConventionLeg2 to-string,
                drrReport -> fixedRatePaymentFrequencyPeriodLeg2,
                drrReport -> fixedRatePaymentFrequencyPeriodMultiplierLeg2
            )

func Create_FixedRate10__1:
    inputs:
        fixedRate Max11Number (0..1)
        fixedRateDayCountConvention string (0..1)
        fixedRatePaymentFrequencyPeriod string (0..1)
        fixedRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        fxd FixedRate10__1 (1..1)

    set fxd:
        FixedRate10__1 {
            rate: SecuritiesTransactionPrice14Choice__1 {
                    dcml: fixedRate
                },
            dayCnt: InterestComputationMethodFormat7__1 {
                    cd: fixedRateDayCountConvention to-enum InterestComputationMethod4Code
                },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            val: fixedRatePaymentFrequencyPeriodMultiplier
                        }
                }
        }

func Create_FloatingRateLeg1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fltg FloatingRate13__1 (1..1)

    set fltg:
        Create_FloatingRate13__1(
                // drrReport -> identifierOfFloatingRateOfLeg1, //TH: This field does not belong to JFSA jurisdiction
                drrReport -> nameOfTheFloatingRateOfLeg1,
                drrReport -> indicatorOfTheFloatingRateOfLeg1,
                drrReport -> floatingRateReferencePeriodOfLeg1TimePeriod,
                drrReport -> floatingRateReferencePeriodOfLeg1Multiplier,
                drrReport -> spreadOfLeg1 -> spreadOfLeg1Monetary,
                drrReport -> spreadOfLeg1 -> spreadOfLeg1Percentage,
                drrReport -> spreadOfLeg1 -> spreadOfLeg1Basis,
                drrReport -> spreadOfLeg1 -> spreadCurrencyOfLeg1 to-string,
                drrReport -> spreadOfLeg1 -> spreadOfLeg1Notation,
                drrReport -> floatingRateDayCountConventionOfLeg1 to-string,
                drrReport -> floatingRatePaymentFrequencyPeriodLeg1 to-string,
                drrReport -> floatingRatePaymentFrequencyPeriodMultiplierLeg1,
                drrReport -> floatingRateResetFrequencyPeriodLeg1,
                drrReport -> floatingRateResetFrequencyPeriodMultiplierLeg1
            )

func Create_FloatingRateLeg2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fltg FloatingRate13__1 (1..1)

    set fltg:
        Create_FloatingRate13__1(
                // drrReport -> identifierOfFloatingRateOfLeg2, //TH: This field does not belong to JFSA jurisdiction
                drrReport -> nameOfTheFloatingRateOfLeg2,
                drrReport -> indicatorOfTheFloatingRateOfLeg2,
                drrReport -> floatingRateReferencePeriodOfLeg2TimePeriod,
                drrReport -> floatingRateReferencePeriodOfLeg2Multiplier,
                drrReport -> spreadOfLeg2 -> spreadOfLeg2Monetary,
                drrReport -> spreadOfLeg2 -> spreadOfLeg2Percentage,
                drrReport -> spreadOfLeg2 -> spreadOfLeg2Basis,
                drrReport -> spreadOfLeg2 -> spreadCurrencyOfLeg2 to-string,
                drrReport -> spreadOfLeg2 -> spreadOfLeg2Notation,
                drrReport -> floatingRateDayCountConventionOfLeg2 to-string,
                drrReport -> floatingRatePaymentFrequencyPeriodLeg2 to-string,
                drrReport -> floatingRatePaymentFrequencyPeriodMultiplierLeg2,
                drrReport -> floatingRateResetFrequencyPeriodOfLeg2,
                drrReport -> floatingRateResetFrequencyPeriodMultiplierLeg2
            )

func Create_FloatingRate2Leg2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fltg FloatingRate13__2 (1..1)

    set fltg: Create_FloatingRate13__2(Create_FloatingRateLeg2(drrReport))

func Create_FloatingRate3Leg2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        fltg FloatingRate13__3 (1..1)

    set fltg: Create_FloatingRate13__3(Create_FloatingRateLeg2(drrReport))

func Create_FloatingRate13__1:
    inputs:
//        identifierOfFloatingRate ISINOct2015Identifier (0..1)
        nameOfTheFloatingRate Max50AlphaNumericText (0..1)
        indicatorOfTheFloatingRate string (0..1)
        floatingRateReferencePeriodTimePeriod string (0..1)
        floatingRateReferencePeriodMultiplier Max3Number (0..1)
        spreadOfLeg1Monetary BaseOne18Rate (0..1)
        spreadOfLeg1Percentage BaseOneRate (0..1)
        spreadOfLeg1Basis BasisFormat (0..1)
        spreadCurrencyOfLeg1 string (0..1)
        spreadOfLeg1Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention string (0..1)
        floatingRatePaymentFrequencyPeriod string (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
        floatingRateResetFrequencyPeriod string (0..1)
        floatingRateResetFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        fltg FloatingRate13__1 (1..1)

    set fltg:
        FloatingRate13__1 {
            nm: nameOfTheFloatingRate,
            rate: FloatingRateIdentification8Choice__1 {
                    cd: indicatorOfTheFloatingRate to-enum FloatingRateIndex1Code
                },
            refPrd: InterestRateContractTerm4__1 {
                    unit: floatingRateReferencePeriodTimePeriod to-enum Frequency13Code__1,
                    val: floatingRateReferencePeriodMultiplier
                },
            sprd: SecuritiesTransactionPrice20Choice__1 {
                    mntryVal: if spreadOfLeg1Notation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: spreadOfLeg1Monetary,
                                        ccy: spreadCurrencyOfLeg1 to-string
                                    },
                                ...
                            },
                    dcml: if spreadOfLeg1Notation = PriceNotationEnum -> Percentage
                        then spreadOfLeg1Percentage,
                    bsisPtSprd: if spreadOfLeg1Notation = PriceNotationEnum -> Basis
                        then spreadOfLeg1Basis
                },
            dayCnt: InterestComputationMethodFormat7__1 {
                    cd: floatingRateDayCountConvention to-enum InterestComputationMethod4Code
                },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            val: floatingRatePaymentFrequencyPeriodMultiplier
                        }
                },
            rstFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: floatingRateResetFrequencyPeriod to-enum Frequency13Code__1,
                            val: floatingRateResetFrequencyPeriodMultiplier
                        }
                }
        }

func Create_FloatingRate13__2:
    inputs:
        fltg1 FloatingRate13__1 (1..1)
    output:
        fltg2 FloatingRate13__2 (1..1)

    set fltg2:
        FloatingRate13__2 {
            nm: fltg1 -> nm,
            rate: fltg1 -> rate,
            refPrd: InterestRateContractTerm4 {
                    unit: fltg1 -> refPrd -> unit to-string to-enum Frequency13Code,
                    val: fltg1 -> refPrd -> val
                },
            sprd: fltg1 -> sprd,
            dayCnt: fltg1 -> dayCnt,
            pmtFrqcy: fltg1 -> pmtFrqcy,
            rstFrqcy: fltg1 -> rstFrqcy
        }

func Create_FloatingRate13__3:
    inputs:
        fltg1 FloatingRate13__1 (1..1)
    output:
        fltg3 FloatingRate13__3 (1..1)

    set fltg3:
        FloatingRate13__3 {
            nm: fltg1 -> nm,
            rate: fltg1 -> rate,
            refPrd: InterestRateContractTerm4__1 {
                    unit: fltg1 -> refPrd -> unit,
                    val: fltg1 -> refPrd -> val
                },
            sprd: fltg1 -> sprd,
            dayCnt: fltg1 -> dayCnt,
            pmtFrqcy: empty, // fltg1 -> pmtFrqcy,
            rstFrqcy: empty, // fltg1 -> rstFrqcy
        }

func GetCcy:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        ccy CurrencyExchange22__1 (1..1)

    set ccy:
        CurrencyExchange22__1 {
            xchgRate: drrReport -> exchangeRate,
            // fwdXchgRate: drrReport -> forwardExchangeRate,
            xchgRateBsis: ExchangeRateBasis1Choice__1 {
                    ccyPair: ExchangeRateBasis1 {
                            baseCcy: if drrReport -> assetClass = "CURR"
                                then SubString(drrReport -> exchangeRateBasis, 1, 3),
                            qtdCcy: if drrReport -> assetClass = "CURR"
                                then SubString(drrReport -> exchangeRateBasis, 5, 3)
                        }
                }
        }

func GetOptn1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        optn OptionOrSwaption10__1 (1..1)

    set optn:
        OptionOrSwaption10__1 {
            tp: GetTp(drrReport),
            mbddTp: GetMbddTp(drrReport),
            exrcStyle: GetExrcStyle(drrReport),
            exrcDt: GetExrcDt(drrReport),
            strkPric: GetStrkPric(drrReport),
            strkPricSchdl: drrReport -> strikePriceSchedule
                    extract
                        Schedule4__1 {
                            uadjstdFctvDt: effectiveDateStrikePrice,
                            uadjstdEndDt: endDateStrikePrice,
                            pric: SecuritiesTransactionPrice17Choice__1 {
                                    mntryVal: if strikePriceNotationInEffectOnAssociatedEffectiveDate = PriceNotationEnum -> Monetary
                                        then AmountAndDirection106__1 {
                                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                        value: strikePriceInEffectOnAssociatedEffectiveDateMonetary,
                                                        ccy: if (drrReport -> contractType = "OPTN" or drrReport -> contractType = "SWPT")
                                                                    and (drrReport -> assetClass = "CURR" or drrReport -> assetClass = "INTR") = False
                                                            then drrReport -> strikePrice -> strikePriceCurrency to-string
                                                    },
                                                ...
                                            },
                                    dcml: if strikePriceNotationInEffectOnAssociatedEffectiveDate = PriceNotationEnum -> Decimal
                                        then strikePriceInEffectOnAssociatedEffectiveDateDecimal
                                }
                        },
            callAmt: GetCallAmt(drrReport),
            putAmt: GetPutAmt(drrReport),
            prmAmt: GetPrmAmt(drrReport),
            prmPmtDt: GetPrmPmtDt(drrReport),
            mtrtyDtOfUndrlyg: GetMtrtyDtOfUndrlyg(drrReport)
        }

func GetOptn2:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        optn OptionOrSwaption10__2 (1..1)

    set optn:
        OptionOrSwaption10__2 {
            tp: GetTp(drrReport),
            mbddTp: GetMbddTp(drrReport),
            exrcStyle: GetExrcStyle(drrReport),
            exrcDt: GetExrcDt(drrReport),
            strkPric: GetStrkPric(drrReport),
            callAmt: GetCallAmt(drrReport),
            putAmt: GetPutAmt(drrReport),
            prmAmt: GetPrmAmt(drrReport),
            prmPmtDt: GetPrmPmtDt(drrReport),
            mtrtyDtOfUndrlyg: GetMtrtyDtOfUndrlyg(drrReport)
        }

func GetTp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        tp OptionType2Code (1..1)

    set tp: drrReport -> optionType to-enum OptionType2Code

func GetMbddTp:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        mbddTp EmbeddedType1Code (1..1)

    set mbddTp: drrReport -> embeddedOptionType to-enum EmbeddedType1Code

func GetExrcStyle:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        exrcStyle OptionStyle6Code (1..1)

    set exrcStyle: drrReport -> optionStyle to-enum OptionStyle6Code

func GetExrcDt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        exrcDt ExerciseDate1Choice__1 (1..1)

    set exrcDt:
        ExerciseDate1Choice__1 {
            frstExrcDt: drrReport -> firstExerciseDate
        }

func GetStrkPric:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        strkPric SecuritiesTransactionPrice17Choice__1 (1..1)

// ESMA 2.134 Strike Price, 2.49 Price Currency
    set strkPric:
        drrReport -> strikePrice
            extract
                SecuritiesTransactionPrice17Choice__1 {
                    mntryVal: if strikePriceNotation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: strikePriceMonetary,
                                        ccy: if (drrReport -> contractType = "OPTN" or drrReport -> contractType = "SWPT")
                                                    and (drrReport -> assetClass = "CURR" or drrReport -> assetClass = "INTR") = False
                                            then drrReport -> strikePrice -> strikePriceCurrency to-string
                                    },
                                ...
                            },
                    dcml: if strikePriceNotation = PriceNotationEnum -> Decimal
                        then strikePriceDecimal
                }

func GetCallAmt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        callAmt ActiveOrHistoricCurrencyAnd5DecimalAmount (1..1)

    set callAmt:
        ActiveOrHistoricCurrencyAnd5DecimalAmount {
            value: drrReport -> callAmount,
            ccy: drrReport -> callCurrency to-string
        }

func GetPutAmt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        putAmt ActiveOrHistoricCurrencyAnd5DecimalAmount (1..1)

    set putAmt:
        ActiveOrHistoricCurrencyAnd5DecimalAmount {
            value: drrReport -> putAmount,
            ccy: drrReport -> putCurrency to-string
        }

func GetPrmAmt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        prmAmt ActiveOrHistoricCurrencyAnd5DecimalAmount (1..1)

    set prmAmt:
        ActiveOrHistoricCurrencyAnd5DecimalAmount {
            value: drrReport -> optionPremiumAmount,
            ccy: drrReport -> optionPremiumCurrency to-string
        }

func GetPrmPmtDt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        prmPmtDt date (1..1)

    set prmPmtDt: drrReport -> optionPremiumPaymentDate

func GetMtrtyDtOfUndrlyg:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        mtrtyDtOfUndrlyg date (1..1)

    set mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying

func GetCdt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        cdt CreditDerivative4__1 (1..1)

    set cdt:
        CreditDerivative4__1 {
            snrty: drrReport -> seniority to-enum DebtInstrumentSeniorityType2Code,
            refPty: DerivativePartyIdentification1Choice {
                    lei: drrReport -> referenceEntity,
                    ...
                },
            srs: drrReport -> series,
            vrsn: drrReport -> version,
            indxFctr: drrReport -> indexFactor,
            trch: TrancheIndicator3Choice__1 {
                    trnchd: Tranche3 {
                            attchmntPt: drrReport -> cdSIndexAttachmentPoint,
                            dtchmntPt: drrReport -> cdSIndexDetachmentPoint
                        }
                }
        }

func GetOthrPmt:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        othrPmt OtherPayment5__1 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__1 {
                    pmtTp: PaymentType5Choice__1 {
                            tp: paymentType to-enum PaymentType4Code
                        },
                    pmtAmt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: amount,
                                    ccy: currency to-string
                                }
                        },
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: payer,
                                    ...
                                },
                            ...
                        },
                    pmtRcvr: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: receiver,
                                    ...
                                },
                            ...
                        }
                }

func GetPackg:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        packg Package4__1 (1..1)

    set packg:
        Package4__1 {
            cmplxTradId: drrReport -> packageIdentifier,
            pric: drrReport -> packageTransactionPrice
                    extract
                        SecuritiesTransactionPrice17Choice__1 {
                            mntryVal: if packageTransactionPriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: packageTransactionPriceMonetary,
                                                ccy: drrReport -> packageTransactionPriceCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if packageTransactionPriceNotation = PriceNotationEnum -> Percentage
                                then packageTransactionPricePercentage
                        },
            sprd: drrReport -> packageTransactionSpread
                    extract
                        SecuritiesTransactionPrice20Choice__1 {
                            mntryVal: if packageTransactionSpreadNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: packageTransactionSpreadMonetary,
                                                ccy: drrReport -> packageTransactionSpreadCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if packageTransactionSpreadNotation = PriceNotationEnum -> Percentage
                                then packageTransactionSpreadPercentage,
                            bsisPtSprd: if packageTransactionSpreadNotation = PriceNotationEnum -> Basis
                                then packageTransactionSpreadBasis
                        }
        }

func Create_TechnicalAttributes5__1:
    inputs:
        drrReport JFSATransactionReport (1..1)
    output:
        techAttrbts TechnicalAttributes5__1 (1..1)

    set techAttrbts:
        TechnicalAttributes5__1 {
            techRcrdId: drrReport -> technicalRecordId + "_" + drrReport -> reportingTimestamp to-string,
        }
