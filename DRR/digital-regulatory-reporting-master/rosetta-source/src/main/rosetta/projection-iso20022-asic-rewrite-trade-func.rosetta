namespace drr.projection.iso20022.asic.rewrite.trade
version "${project.version}"

import drr.projection.iso20022.common.*
import drr.regulation.common.*
import drr.standards.iso.*
import drr.regulation.asic.rewrite.trade.*
import drr.regulation.common.util.*
import iso20022.auth030.asic.*

func Project_ASICTradeReportToIso20022:
    [projection]
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradRpt -> rptHdr: Create_TradeReportHeader

    set iso20022Report -> derivsTradRpt -> tradData -> rpt:
        Create_TradeReport32Choice__1(drrReport)

func Create_TradeReportHeader:
    output:
        rptHdr TradeReportHeader4__1 (1..1)

    set rptHdr:
        TradeReportHeader4__1 {
            nbRcrds: 1
        }

func Create_TradeReport32Choice__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        rpt TradeReport32Choice__1 (1..1)

    alias actionType: drrReport -> actionType
//    alias lvl: drrReport -> level
    set rpt:
        TradeReport32Choice__1 {
            new: if actionType = ActionTypeEnum -> NEWT to-string
                then TradeData42__1 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__1(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            mod: if actionType = ActionTypeEnum -> MODI to-string
                then TradeData42__2 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__2(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            crrctn: if actionType = ActionTypeEnum -> CORR to-string
                then TradeData42__3 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__3(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            termntn: if actionType = ActionTypeEnum -> TERM to-string
                then TradeData42__4 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__4(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            valtnUpd: if actionType = ActionTypeEnum -> VALU to-string
                then TradeData42__5 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__3(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__5(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            err: if actionType = ActionTypeEnum -> EROR to-string
                then TradeData42__6 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__6(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            rvv: if actionType = ActionTypeEnum -> REVI to-string
                then TradeData42__8 {
                        ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                        cmonTradData: Create_CommonTradeDataReport69__8(drrReport),
                        techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                    },
            ...
        }

// CounterpartySpecificData36
func Create_CounterpartySpecificData36__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__1 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__1 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport)
        }

func Create_CounterpartySpecificData36__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__2 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__2 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport)
        }

func Create_CounterpartySpecificData36__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__3 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__3 {
            ctrPty: Create_TradeCounterpartyReport20__3(drrReport),
            valtn: ContractValuationData8__1 {
                    ctrctVal: AmountAndDirection109__1 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> valuationAmount,
                                    ccy: drrReport -> valuationCurrency to-string
                                },
                            ...
                        },
                    tmStmp: drrReport -> valuationTimestamp,
                    tp: drrReport -> valuationMethod,
                    dlta: drrReport -> delta
                },
        }

// TradeCounterpartyReport20
func Create_TradeCounterpartyReport20__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__1 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                    id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                    drctnOrSd: Direction4Choice {
                            ctrPtySd: drrReport -> direction to-enum OptionParty1Code,
                            drctn: Direction2 {
                                    drctnOfTheFrstLeg: drrReport -> direction2OfLeg1 to-enum OptionParty3Code,
                                    drctnOfTheScndLeg: drrReport -> direction2OfLeg2 to-enum OptionParty3Code
                                }
                        },
                },
            othrCtrPty: Counterparty46__1 {
                    idTp: Create_PartyIdentification248Choice__2(drrReport)
                },
            brkr: Create_OrganisationIdentification15Choice__1(drrReport -> broker),
            submitgAgt: GetSubmitgAgt(drrReport),
            clrMmb: Create_PartyIdentification248Choice__1(drrReport -> clearingMember),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
            exctnAgt: OrganisationIdentification15Choice__1 {
                    lei: drrReport -> executionAgentOfTheCounterparty1
                },
            ...
        }

func Create_TradeCounterpartyReport20__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__2 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__2 {
                    id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1)
                },
            othrCtrPty: Counterparty46__2 {
                    idTp: Create_PartyIdentification248Choice__3(drrReport)
                },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func Create_TradeCounterpartyReport20__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__3 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__3 {
            rptgCtrPty: Counterparty45__3 {
                    id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                    rptgXmptn: empty
                },
            othrCtrPty: Counterparty46__2 {
                    idTp: Create_PartyIdentification248Choice__3(drrReport)
                },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func GetSubmitgAgt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        submitgAgt OrganisationIdentification15Choice__1 (1..1)

    set submitgAgt:
        Create_OrganisationIdentification15Choice__1(drrReport -> reportSubmittingEntityID)

func GetNttyRspnsblForRpt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        nttyRspnsblForRpt OrganisationIdentification15Choice__1 (1..1)

    set nttyRspnsblForRpt:
        Create_OrganisationIdentification15Choice__1(drrReport -> reportingEntity)

// PartyIdentification248Choice
func Create_PartyIdentification248Choice__1:
    inputs:
        lei string (1..1)
    output:
        id PartyIdentification248Choice__1 (1..1)

    set id:
        PartyIdentification248Choice__1 {
            lgl: LegalPersonIdentification1__1 {
                    id: Create_OrganisationIdentification15Choice__1(lei)
                }
        }

func Create_PartyIdentification248Choice__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__2 (1..1)

    set id:
        PartyIdentification248Choice__2 {
            lgl: if drrReport -> counterpartyIdentifierTypeIndicator = True
                then LegalPersonIdentification1__2 {
                        id: Create_OrganisationIdentification15Choice__2(
                                    drrReport -> counterparty2
                                ),
                        ...
                    },
            ntrl: if drrReport -> counterpartyIdentifierTypeIndicator = False
                then NaturalPersonIdentification3__1 {
                        id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                        id: drrReport -> counterparty2
                                    }
                            },
                        ctry: drrReport -> countryOfTheCounterParty2 to-string
                    }
        }

func Create_PartyIdentification248Choice__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__3 (1..1)

    set id:
        PartyIdentification248Choice__3 {
            lgl: if drrReport -> counterpartyIdentifierTypeIndicator = True
                then LegalPersonIdentification1__3 {
                        id: Create_OrganisationIdentification15Choice__2(
                                    drrReport -> counterparty2
                                )
                    },
            ntrl: if drrReport -> counterpartyIdentifierTypeIndicator = False
                then NaturalPersonIdentification3__2 {
                        id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                        id: drrReport -> counterparty2
                                    }
                            }
                    }
        }

// OrganisationIdentification15Choice
func Create_OrganisationIdentification15Choice__1:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__1 (1..1)

    set id:
        OrganisationIdentification15Choice__1 {
            lei: lei
        }

func Create_OrganisationIdentification15Choice__2:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__2 (1..1)

    set id:
        OrganisationIdentification15Choice__2 {
            lei: lei,
            ...
        }

// CommonTradeDataReport69
func Create_CommonTradeDataReport69__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__1 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__1 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__1(drrReport)
        }

func Create_CommonTradeDataReport69__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__2 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__2 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__2(drrReport)
        }

func Create_CommonTradeDataReport69__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__3 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__3 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__3(drrReport)
        }

func Create_CommonTradeDataReport69__4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__4 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__4 {
            ctrctData: Create_ContractType14__2(drrReport),
            txData: Create_TradeTransaction49__4(drrReport)
        }

func Create_CommonTradeDataReport69__5:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__5 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__5 {
            txData: Create_TradeTransaction49__5(drrReport)
        }

func Create_CommonTradeDataReport69__6:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__6 {
            ctrctData: Create_ContractType14__2(drrReport),
            txData: Create_TradeTransaction49__6(drrReport)
        }

func Create_CommonTradeDataReport69__7:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__7 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__7 {
            ctrctData: Create_ContractType14__2(drrReport),
            txData: Create_TradeTransaction49__7(drrReport)
        }

func Create_CommonTradeDataReport69__8:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__8 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__8 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__8(drrReport)
        }

// ContractType14
func Create_ContractType14__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrctData ContractType14__1 (1..1)

    set ctrctData:
        ContractType14__1 {
            ctrctTp: drrReport -> contractType to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-enum ProductType4Code__1,
            pdctId: SecurityIdentification46__1 {
                    unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                            id: drrReport -> uniqueProductIdentifier
                        }
                },
            undrlygInstrm: SecurityIdentification41Choice__1 {
                    isin: drrReport -> underlyingIdentification,
                    bskt: CustomBasket4__1 {
                            strr: empty,
                            id: drrReport -> customBasketCode,
                            cnsttnts: drrReport -> basketConstituents
                                    extract
                                        BasketConstituents3__1 {
                                            instrmId: InstrumentIdentification6Choice__1 {
                                                    isin: identifier,
                                                    ... // Check
                                                }
                                        }
                        },
                    ...
                },
            sttlmCcy: CurrencyExchange23__1 {
                    ccy: drrReport -> settlementCurrencyLeg1 to-string
                },
            sttlmCcyScndLeg: CurrencyExchange23__1 {
                    ccy: drrReport -> settlementCurrencyLeg2 to-string
                }
        }

func Create_ContractType14__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrctData ContractType14__2 (1..1)

    set ctrctData:
        ContractType14__2 {
            ctrctTp: drrReport -> contractType to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-enum ProductType4Code__1,
            pdctId: SecurityIdentification46__2 {
                    unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                            id: drrReport -> uniqueProductIdentifier
                        }
                }
        }

// TradeTransaction49
func Create_TradeTransaction49__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__1 (1..1)

    set txData:
        TradeTransaction49__1 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__2 (1..1)

    set txData:
        TradeTransaction49__2 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt_2(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn_2(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__3 (1..1)

    set txData:
        TradeTransaction49__3 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt_2(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__4 (1..1)

    set txData:
        TradeTransaction49__4 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            exctnTmStmp: GetExctnTmStmp(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            othrPmt: GetOthrPmt(drrReport)
        }

func Create_TradeTransaction49__5:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__5 (1..1)

    set txData:
        TradeTransaction49__5 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            intrstRate: GetIntrstRate_2(drrReport),
        }

func Create_TradeTransaction49__6:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__6 (1..1)

    set txData:
        TradeTransaction49__6 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                }
        }

func Create_TradeTransaction49__7:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__7 (1..1)

    set txData:
        TradeTransaction49__7 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            derivEvt: GetDerivEvt4(drrReport)
        }

func Create_TradeTransaction49__8:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction49__8 (1..1)

    set txData:
        TradeTransaction49__8 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                    unqTxIdr: GetTxId(drrReport),
                    ...
                },
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

// TradeTransaction49 helper funcs
func GetTxId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        uti UTIIdentifier (1..1)

    set uti: drrReport -> uniqueTransactionIdentifier

func GetPrrTxId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        prrTxId UniqueTransactionIdentifier3Choice__1 (1..1)

    set prrTxId:
        UniqueTransactionIdentifier3Choice__1 {
            unqTxIdr: drrReport -> priorUTI,
            ...
        }

func GetCollPrtflCd:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        collPrtflCd CollateralPortfolioCode5Choice__1 (1..1)

    set collPrtflCd:
        CollateralPortfolioCode5Choice__1 {
            mrgnPrtflCd: MarginPortfolio3__1 {
                    initlMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: PortfolioIdentification3__1 {
                                    cd: empty
                                },
                            noPrtfl: empty
                        },
                    vartnMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: PortfolioIdentification3__1 {
                                    cd: empty
                                },
                            noPrtfl: empty
                        }
                }
        }

/*
 * func GetRptTrckgNb:
 *     inputs:
 *         drrReport ASICTransactionReport (1..1)
 *     output:
 *         rptTrckgNb Max52Text (1..1)

 *     set rptTrckgNb: drrReport -> reportTrackingNumber
 */
func GetPltfmIdr:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        pltfmIdr MICIdentifier (1..1)

    set pltfmIdr: drrReport -> platformIdentifier

func GetTxPric:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txPric PriceData2__1 (1..1)

    set txPric -> pric:
        drrReport -> price
            extract
                SecuritiesTransactionPrice17Choice__1 {
                    mntryVal: if priceNotation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: priceMonetary,
                                        ccy: drrReport -> price -> priceCurrency to-string
                                    },
                                ...
                            },
                    dcml: if priceNotation = PriceNotationEnum -> Decimal
                        then priceDecimal
                }

func GetNtnlAmt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__1 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__1 {
            frstLeg: NotionalAmount5__1 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg1,
                                    ccy: drrReport -> notionalCurrencyLeg1 to-string
                                },
                            ...
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg1
                            extract
                                Schedule11__1 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__2 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyLeg1 to-string
                                                },
                                            ...
                                        },
                                    ...
                                }
                },
            scndLeg: NotionalAmount6__1 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg2,
                                    ccy: drrReport -> notionalCurrencyLeg2 to-string
                                },
                            ...
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg2
                            extract
                                Schedule11__1 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__2 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyLeg2 to-string
                                                },
                                            ...
                                        },
                                    ...
                                }
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlAmt_2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__2 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__2 {
            frstLeg: NotionalAmount5__2 {
                    amt: AmountAndDirection106__2 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: drrReport -> notionalLeg1,
                                    ccy: drrReport -> notionalCurrencyLeg1 to-string
                                },
                            ...
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg1
                            extract
                                Schedule11__2 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__4 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyLeg1 to-string
                                                },
                                            ...
                                        },
                                    ...
                                }
                },
            scndLeg: NotionalAmount6__2 {
                    amt: AmountAndDirection106__4 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                                    value: drrReport -> notionalLeg2,
                                    ccy: drrReport -> notionalCurrencyLeg2 to-string
                                },
                            ...
                        },
                    schdlPrd: drrReport -> notionalAmountScheduleLeg2
                            extract
                                Schedule11__2 {
                                    uadjstdFctvDt: effectiveDate,
                                    amt: AmountAndDirection106__4 {
                                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                                                    value: amount,
                                                    ccy: drrReport -> notionalCurrencyLeg2 to-string
                                                },
                                            ...
                                        },
                                    ...
                                }
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlQty:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__1 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__1 {
            frstLeg: NotionalQuantity9__1 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg1,
                    unitOfMeasr: UnitOfMeasure8Choice__1 {
                            cd: drrReport -> quantityUnitOfMeasureLeg1
                        },
                    dtls: QuantityOrTerm1Choice__1 {
                            term: empty
                        }
                },
            scndLeg: NotionalQuantity9__1 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg2,
                    unitOfMeasr: UnitOfMeasure8Choice__1 {
                            cd: drrReport -> quantityUnitOfMeasureLeg2
                        },
                    dtls: QuantityOrTerm1Choice__1 {
                            term: empty
                        }
                }
        // TODO: Notional Amount End Date
        }

func GetNtnlQty2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__2 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__2 {
            frstLeg: NotionalQuantity9__2 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg1,
                    unitOfMeasr: UnitOfMeasure8Choice__1 {
                            cd: drrReport -> quantityUnitOfMeasureLeg1
                        },
                    dtls: QuantityOrTerm1Choice__2 {
                            term: empty
                        }
                },
            scndLeg: NotionalQuantity9__1 {
                    ttlQty: drrReport -> totalNotionalQuantityLeg2,
                    unitOfMeasr: UnitOfMeasure8Choice__1 {
                            cd: drrReport -> quantityUnitOfMeasureLeg2
                        },
                    dtls: QuantityOrTerm1Choice__1 {
                            term: empty
                        }
                }
        // TODO: Notional Amount End Date
        }

func GetExctnTmStmp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        exctnTmStmp zonedDateTime (1..1)

    set exctnTmStmp: drrReport -> executionTimestamp

func GetFctvDt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        fctvDt ISODate (1..1)

    set fctvDt: drrReport -> effectiveDate

func GetXprtnDt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        xprtnDt ISODate (1..1)

    set xprtnDt: drrReport -> expirationDate

// DerivativeEvent6
func GetDerivEvt1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__1 (1..1)

    set derivEvt:
        DerivativeEvent6__1 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__2 (1..1)

    set derivEvt:
        DerivativeEvent6__2 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__3 (1..1)

    set derivEvt:
        DerivativeEvent6__3 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__4 (1..1)

    set derivEvt:
        DerivativeEvent6__4 {
            tp: GetDerivEvtTp(drrReport)
        }

func GetDerivEvtId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id EventIdentifier1Choice__1 (1..1)

    set id:
        EventIdentifier1Choice__1 {
            evtIdr: drrReport -> eventIdentifier
        }

func GetDerivEvtTp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__1 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__1

func GetDerivEvtTmStmp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tmStmp DateAndDateTime2Choice__1 (1..1)

    set tmStmp:
        DateAndDateTime2Choice__1 {
            dtTm: drrReport -> eventTimestamp
        }

func GetTradClr:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tradClr TradeClearing11__1 (1..1)

    set tradClr:
        TradeClearing11__1 {
            clrSts: Cleared23Choice__1 {
                    clrd: if drrReport -> cleared = "Y"
                        then ClearingPartyAndTime21Choice__1 {
                                dtls: ClearingPartyAndTime22__1 {
                                        ccp: Create_OrganisationIdentification15Choice__1(
                                                    drrReport -> centralCounterparty
                                                ),
                                        clrDtTm: drrReport -> clearingTimestamp
                                    }
                            },
                    intndToClear: empty,
                    nonClrd: if drrReport -> cleared = "N"
                        then ClearingExceptionOrExemption3Choice__1 {
                                rsn: NoReasonCode -> NORE
                            }
                }
        }

func GetIntrstRate:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__1 (1..1)

    set intrstRate:
        InterestRateLegs14__1 {
            frstLeg: InterestRate33Choice__1 {
                    fxd: Create_FixedRate(
                                drrReport -> fixedRateLeg1,
                                drrReport -> dayCountConventionLeg1,
                                drrReport -> paymentFrequencyPeriodLeg1,
                                drrReport -> paymentFrequencyPeriodMultiplierLeg1
                            ),
                    fltg: Create_FloatingRate(
                                drrReport -> spreadLeg1 -> spreadLeg1Monetary,
                                drrReport -> spreadLeg1 -> spreadLeg1Decimal,
                                drrReport -> spreadLeg1 -> spreadLeg1Basis,
                                drrReport -> spreadCurrencyLeg1 to-string,
                                drrReport -> spreadLeg1 -> spreadLeg1Notation,
                                drrReport -> dayCountConventionLeg1,
                                drrReport -> paymentFrequencyPeriodLeg1,
                                drrReport -> paymentFrequencyPeriodMultiplierLeg1
                            )
                },
            scndLeg: InterestRate33Choice__2 {
                    fxd: Create_FixedRate(
                                drrReport -> fixedRateLeg2,
                                drrReport -> dayCountConventionLeg2,
                                drrReport -> paymentFrequencyPeriodLeg2,
                                drrReport -> paymentFrequencyPeriodMultiplierLeg2
                            ),
                    fltg: Create_FloatingRate2(
                                drrReport -> indicatorOfTheFloatingRateLeg2,
                                drrReport -> floatingRateReferencePeriodOfLeg2TimePeriod,
                                drrReport -> floatingRateReferencePeriodOfLeg2Multiplier,
                                drrReport -> spreadLeg2 -> spreadLeg2Monetary,
                                drrReport -> spreadLeg2 -> spreadLeg2Decimal,
                                drrReport -> spreadLeg2 -> spreadLeg2Basis,
                                drrReport -> spreadCurrencyLeg2 to-string,
                                drrReport -> spreadLeg2 -> spreadLeg2Notation,
                                drrReport -> dayCountConventionLeg2,
                                drrReport -> paymentFrequencyPeriodLeg2,
                                drrReport -> paymentFrequencyPeriodMultiplierLeg2
                            )
                },
        }

func GetIntrstRate_2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__2 (1..1)

    set intrstRate:
        InterestRateLegs14__2 {
            frstLeg: InterestRate33Choice__3 {
                    fltg: Create_FloatingRate3(
                                drrReport -> nextFloatingReferenceResetDateLeg1
                            )
                },
            scndLeg: InterestRate33Choice__3 {
                    fltg: Create_FloatingRate3(
                                drrReport -> nextFloatingReferenceResetDateLeg2
                            )
                },
        }

func Create_FixedRate:
    inputs:
        fixedRate Max11Number (0..1)
        fixedRateDayCountConvention InterestComputationMethod4Code (0..1)
        fixedRatePaymentFrequencyPeriod string (0..1)
        fixedRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FixedRate10__1 (1..1)

    set out:
        FixedRate10__1 {
            rate: SecuritiesTransactionPrice14Choice__1 {
                    dcml: fixedRate
                },
            dayCnt: InterestComputationMethodFormat7__1 {
                    cd: fixedRateDayCountConvention
                },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            val: fixedRatePaymentFrequencyPeriodMultiplier
                        }
                }
        }

func Create_FloatingRate:
    inputs:
        spreadOfLeg1Monetary BaseOne18Rate (0..1)
        spreadOfLeg1Decimal BaseOneRate (0..1)
        spreadOfLeg1Basis BasisFormat (0..1)
        spreadCurrencyOfLeg1 string (0..1)
        spreadOfLeg1Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod string (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FloatingRate13__1 (1..1)

    set out:
        FloatingRate13__1 {
            sprd: SecuritiesTransactionPrice20Choice__1 {
                    mntryVal: if spreadOfLeg1Notation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: spreadOfLeg1Monetary,
                                        ccy: spreadCurrencyOfLeg1 to-string
                                    },
                                ...
                            },
                    dcml: if spreadOfLeg1Notation = PriceNotationEnum -> Decimal
                        then spreadOfLeg1Decimal,
                    bsisPtSprd: if spreadOfLeg1Notation = PriceNotationEnum -> Basis
                        then spreadOfLeg1Basis
                },
            dayCnt: InterestComputationMethodFormat7__1 {
                    cd: floatingRateDayCountConvention
                },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            val: floatingRatePaymentFrequencyPeriodMultiplier
                        }
                }
        }

func Create_FloatingRate2:
    inputs:
        indicatorOfTheFloatingRate string (0..1)
        floatingRateReferencePeriodTimePeriod string (0..1)
        floatingRateReferencePeriodMultiplier Max3Number (0..1)
        spreadOfLeg2Monetary BaseOne18Rate (0..1)
        spreadOfLeg2Decimal BaseOneRate (0..1)
        spreadOfLeg2Basis BasisFormat (0..1)
        spreadCurrencyOfLeg2 string (0..1)
        spreadOfLeg2Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod string (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FloatingRate13__2 (1..1)

    set out:
        FloatingRate13__2 {
            rate: FloatingRateIdentification8Choice__1 {
                    cd: indicatorOfTheFloatingRate
                },
            refPrd: InterestRateContractTerm4__2 {
                    unit: floatingRateReferencePeriodTimePeriod to-enum Frequency13Code__2,
                    val: floatingRateReferencePeriodMultiplier
                },
            sprd: SecuritiesTransactionPrice20Choice__1 {
                    mntryVal: if spreadOfLeg2Notation = PriceNotationEnum -> Monetary
                        then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: spreadOfLeg2Monetary,
                                        ccy: spreadCurrencyOfLeg2 to-string
                                    },
                                ...
                            },
                    dcml: if spreadOfLeg2Notation = PriceNotationEnum -> Decimal
                        then spreadOfLeg2Decimal,
                    bsisPtSprd: if spreadOfLeg2Notation = PriceNotationEnum -> Basis
                        then spreadOfLeg2Basis
                },
            dayCnt: InterestComputationMethodFormat7__1 {
                    cd: floatingRateDayCountConvention
                },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                    term: InterestRateContractTerm4__1 {
                            unit: floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            val: floatingRatePaymentFrequencyPeriodMultiplier
                        }
                }
        }

func Create_FloatingRate3:
    inputs:
        nextFloatingReferenceResetDateLeg ISODate (0..1)
    output:
        out FloatingRate13__3 (1..1)

    set out:
        FloatingRate13__3 {
            nxtFltgRst: ResetDateAndValue1__1 {
                    dt: nextFloatingReferenceResetDateLeg
                }
        }

func GetCcy:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ccy CurrencyExchange22__1 (1..1)

    set ccy:
        CurrencyExchange22__1 {
            xchgRate: drrReport -> exchangeRate,
            xchgRateBsis: ExchangeRateBasis1Choice__1 {
                    ccyPair: ExchangeRateBasis1 {
                            baseCcy: if drrReport -> assetClass = "CURR"
                                then SubString(drrReport -> exchangeRateBasis, 1, 3),
                            qtdCcy: if drrReport -> assetClass = "CURR"
                                then SubString(drrReport -> exchangeRateBasis, 5, 3)
                        }
                }
        }

func GetOptn:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        optn OptionOrSwaption10__1 (1..1)

    set optn:
        OptionOrSwaption10__1 {
            strkPric: drrReport -> strikePrice
                    extract
                        SecuritiesTransactionPrice17Choice__1 {
                            mntryVal: if strikePriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: strikePriceMonetary,
                                                ccy: if (drrReport -> contractType = "OPTN" or drrReport -> contractType = "SWPT")
                                                            and (drrReport -> assetClass = "CURR" or drrReport -> assetClass = "INTR") = False
                                                    then drrReport -> strikePrice -> strikePriceCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if strikePriceNotation = PriceNotationEnum -> Decimal
                                then strikePriceDecimal
                        },
            callAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                    value: drrReport -> callAmount,
                    ccy: drrReport -> callCurrency to-string
                },
            putAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                    value: drrReport -> putAmount,
                    ccy: drrReport -> putCurrency to-string
                },
            prmAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                    value: drrReport -> optionPremiumAmount,
                    ccy: drrReport -> optionPremiumCurrency to-string
                },
            prmPmtDt: drrReport -> optionPremiumPaymentDate,
            mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying
        }

func GetOptn_2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        optn OptionOrSwaption10__2 (1..1)

    set optn:
        OptionOrSwaption10__2 {
            strkPric: drrReport -> strikePrice
                    extract
                        SecuritiesTransactionPrice17Choice__1 {
                            mntryVal: if strikePriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: strikePriceMonetary,
                                                ccy: if (drrReport -> contractType = "OPTN" or drrReport -> contractType = "SWPT")
                                                            and (drrReport -> assetClass = "CURR" or drrReport -> assetClass = "INTR") = False
                                                    then drrReport -> strikePrice -> strikePriceCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if strikePriceNotation = PriceNotationEnum -> Decimal
                                then strikePriceDecimal
                        },
            callAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                    value: drrReport -> callAmount,
                    ccy: drrReport -> callCurrency to-string
                },
            putAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                    value: drrReport -> putAmount,
                    ccy: drrReport -> putCurrency to-string
                },
            prmAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                    value: drrReport -> optionPremiumAmount,
                    ccy: drrReport -> optionPremiumCurrency to-string
                },
            prmPmtDt: drrReport -> optionPremiumPaymentDate,
            mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying
        }

func GetCdt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cdt CreditDerivative4__1 (1..1)

    set cdt:
        CreditDerivative4__1 {
            indxFctr: drrReport -> indexFactor,
            trch: TrancheIndicator3Choice__1 {
                    trnchd: Tranche3 {
                            attchmntPt: drrReport -> cdSIndexAttachmentPoint,
                            dtchmntPt: drrReport -> cdSIndexDetachmentPoint
                        }
                }
        }

func GetOthrPmt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        othrPmt OtherPayment5__1 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__1 {
                    pmtTp: PaymentType5Choice__1 {
                            tp: paymentType to-enum PaymentType4Code__1
                        },
                    pmtAmt: AmountAndDirection106__3 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: amount,
                                    ccy: currency to-string
                                }
                        },
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: if payerFormat = PartyIdentifierFormatEnum -> Lei
                                        then payer,
                                    ...
                                },
                            ntrl: NaturalPersonIdentification2__1 {
                                    id: GenericIdentification175__1 {
                                            id: if payerFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                                then payer
                                        }
                                }
                        },
                    pmtRcvr: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: if receiverFormat = PartyIdentifierFormatEnum -> Lei
                                        then receiver,
                                    ...
                                },
                            ntrl: NaturalPersonIdentification2__1 {
                                    id: GenericIdentification175__1 {
                                            id: if receiverFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                                then receiver
                                        }
                                }
                        }
                }

func GetOthrPmt_2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        othrPmt OtherPayment5__2 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__2 {
                    pmtTp: PaymentType5Choice__2 {
                            tp: paymentType to-enum PaymentType4Code
                        },
                    pmtAmt: AmountAndDirection106__3 {
                            amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: amount,
                                    ccy: currency to-string
                                }
                        },
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: if payerFormat = PartyIdentifierFormatEnum -> Lei
                                        then payer,
                                    ...
                                },
                            ntrl: NaturalPersonIdentification2__1 {
                                    id: GenericIdentification175__1 {
                                            id: if payerFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                                then payer
                                        }
                                }
                        },
                    pmtRcvr: PartyIdentification236Choice__1 {
                            lgl: OrganisationIdentification15Choice__2 {
                                    lei: if receiverFormat = PartyIdentifierFormatEnum -> Lei
                                        then receiver,
                                    ...
                                },
                            ntrl: NaturalPersonIdentification2__1 {
                                    id: GenericIdentification175__1 {
                                            id: if receiverFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                                then receiver
                                        }
                                }
                        }
                }

func GetPackg:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        packg Package4__1 (1..1)

    set packg:
        Package4__1 {
            cmplxTradId: drrReport -> packageIdentifier,
            pric: drrReport -> packageTransactionPrice
                    extract
                        SecuritiesTransactionPrice17Choice__1 {
                            mntryVal: if packageTransactionPriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: packageTransactionPriceMonetary,
                                                ccy: drrReport -> packageTransactionPrice -> packageTransactionPriceCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if packageTransactionPriceNotation = PriceNotationEnum -> Decimal
                                then packageTransactionPriceDecimal
                        },
            sprd: drrReport -> packageTransactionSpread
                    extract
                        SecuritiesTransactionPrice20Choice__1 {
                            mntryVal: if packageTransactionSpreadNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                                value: packageTransactionSpreadMonetary,
                                                ccy: drrReport -> packageTransactionSpread -> packageTransactionSpreadCurrency to-string
                                            },
                                        ...
                                    },
                            dcml: if packageTransactionSpreadNotation = PriceNotationEnum -> Decimal
                                then packageTransactionSpreadDecimal,
                            bsisPtSprd: if packageTransactionSpreadNotation = PriceNotationEnum -> Basis
                                then packageTransactionSpreadBasis
                        },
            ...
        }

func Create_TechnicalAttributes5__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        techAttrbts TechnicalAttributes5__1 (1..1)

    set techAttrbts:
        TechnicalAttributes5__1 {
            techRcrdId: drrReport -> technicalRecordId + "_" + drrReport -> reportingTimestamp to-string,
            rptRctTmStmp: drrReport -> reportingTimestamp
        }
