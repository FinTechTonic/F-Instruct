namespace drr.regulation.mas.rewrite.trade
version "${project.version}"

import cdm.base.*
import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.party.*

import drr.regulation.common.*
import drr.standards.iso.*
import drr.regulation.mas.*
import drr.regulation.common.util.*
import drr.enrichment.common.*
import drr.enrichment.upi.*
import drr.standards.iso.upi.*

import iso20022.auth030.mas.*

type MASTransactionReport:
    counterparty1 LEIIdentifier (1..1)
        [ruleReference Counterparty1]
    counterparty2 Max72AlphaNumericText (1..1)
        [ruleReference Counterparty2]
    counterparty2IdentifierType boolean (1..1)
        [ruleReference Counterparty2IdentifierType]
    tradingCapacityOfSpecifiedPerson string (0..1)
        [ruleReference TradingCapacityOfSpecifiedPerson]
    direction string (0..1)
	    [ruleReference Direction]
    directionOfLeg1 string (0..1)
	    [ruleReference DirectionOfLeg1]
    directionOfLeg2 string (0..1)
        [ruleReference DirectionOfLeg2]
    reportingSpecifiedPerson LEIIdentifier (1..1)
        [ruleReference ReportingSpecifiedPerson]
    dataSubmitter string (1..1)
        [ruleReference DataSubmitter]
    uniqueTransactionIdentifier UTIIdentifier (0..1)
        [ruleReference UniqueTransactionIdentifier]
    uniqueTransactionIdentifierProprietary UTIIdentifierLegacy (0..1)
        [ruleReference UniqueTransactionIdentifierProprietary]
    uniqueProductIdentifier string (0..1)
        [ruleReference UniqueProductIdentifier]
    priorUTI UTIIdentifier (0..1)
        [ruleReference PriorUTI]
    priorUTIProprietary UTIIdentifierLegacy (0..1)
        [ruleReference PriorUTIProprietary]
    contractType string (1..1)
        [ruleReference ContractType]
    assetClass Max4Text (1..1)
        [ruleReference AssetClass]
    underlying ISINOct2015Identifier (0..1)
        [ruleReference Underlying]
    underlyingIdentificationType Max1Text (0..1)
        [ruleReference UnderlyingIdentificationTypeDTCC]
    underlyingIdOther string (0..1)
        [ruleReference UnderlyingIdOtherDTCC]
    underlyingIdOtherSource ProductIdTypeEnum (0..1)
        [ruleReference UnderlyingIdOtherSourceDTCC]
    nameOfTheUnderlyingIndex Max50AlphaNumericTextWithSplChars (0..1)
        [ruleReference NameOfTheUnderlyingIndexDTCC]
    fixedRateOfLeg1 Max21D10Number (0..1)
        [ruleReference FixedRateOfLeg1]
    identifierOfFloatingRateOfLeg1 ISINOct2015Identifier (0..1)
        [ruleReference IdentifierOfFloatingRateOfLeg1]
    nameOfTheFloatingRateOfLeg1 Max50AlphaNumericText (0..1)
        [ruleReference NameOfTheFloatingRateOfLeg1]
    spreadOfLeg1 SpreadOfLeg1 (0..1)
    fixedRateOfLeg2 Max11Number (0..1)
        [ruleReference FixedRateOfLeg2]
    identifierOfFloatingRateOfLeg2 ISINOct2015Identifier (0..1)
        [ruleReference IdentifierOfFloatingRateOfLeg2]
    nameOfTheFloatingRateOfLeg2 Max50AlphaNumericText (0..1)
        [ruleReference NameOfTheFloatingRateOfLeg2]
    spreadOfLeg2 SpreadOfLeg2 (0..1)
    optionType Max4Text (0..1)
        [ruleReference OptionType]
    optionStyle Max4Text (0..1)
        [ruleReference OptionStyle]
    firstExerciseDate date (0..1)
        [ruleReference FirstExerciseDate]
    effectiveDate ISODate (1..1)
        [ruleReference EffectiveDate]
    expirationDate ISODate (0..1)
        [ruleReference ExpirationDate]
    swapLinkID Max35AlphaNumericText (0..1)
        [ruleReference SwapLinkID]
    packageIdentifier Max35AlphaNumericText (0..1)
        [ruleReference PackageIdentifier]
    deliveryType string (1..1)
        [ruleReference DeliveryType]
    settlementCurrency1 ISOCurrencyCodeEnum (0..1)
        [ruleReference SettlementCurrency1]
    settlementCurrency2 ISOCurrencyCodeEnum (0..1)
        [ruleReference SettlementCurrency2]
    finalContractualSettlementDate date (0..1) 
        [ruleReference FinalContractualSettlementDate]
    cleared Max1Text (1..1)
        [ruleReference Cleared]
    centralCounterparty LEIIdentifier (0..1)
        [ruleReference CentralCounterparty]
    clearingMember LEIIdentifier (0..1)
        [ruleReference ClearingMember]
    clearingTimestamp zonedDateTime (0..1)
        [ruleReference ClearingTimestamp]
    platformIdentifier Max4Text (1..1)
        [ruleReference PlatformIdentifier]
    reportingObligationOfSpecifiedPerson string (0..1)
        [ruleReference ReportingObligationOfSpecifiedPerson]
    bookingLocation CountryCode (0..1)
        [ruleReference BookingLocation]
    traderLocation CountryCode (0..1)
        [ruleReference TraderLocation]
    confirmed string (0..1)
        [ruleReference Confirmed]
    confirmationTimestamp zonedDateTime (0..1)
        [ruleReference ConfirmationTimestamp]
    executionTimestamp zonedDateTime (1..1)
        [ruleReference ExecutionTimestamp]
    reportingTimestamp zonedDateTime (1..1)
        [ruleReference ReportingTimestamp]
    basketConstituents BasketConstituentsReport (0..*)
        [ruleReference BasketConstituents]
    valuationAmount Max30D5Number (0..1)
        [ruleReference ValuationAmount]
    valuationCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference ValuationCurrency]
    valuationMethod ValuationType1Code (0..1)
        [ruleReference ValuationMethod]
    valuationTimestamp zonedDateTime (0..1)
        [ruleReference ValuationTimestamp]
    collateralPortfolioIndicator boolean (0..1)
        [ruleReference CollateralPortfolioIndicator]
    initialMarginCollateralPortfolioCode Max52AlphaNumericText (0..1)
        [ruleReference InitialMarginCollateralPortfolioCodeDTCC]
    variationMarginCollateralPortfolioCode Max52AlphaNumericText (0..1)
        [ruleReference VariationMarginCollateralPortfolioCodeDTCC]
    notionalAmountOfTheContractOrLeg1 Max30D5Number (0..1)
        [ruleReference NotionalAmountOfTheContractOrLeg1]
    notionalCurrencyOfTheContractOrLeg1 ISOCurrencyCodeEnum (0..1)
        [ruleReference NotionalCurrencyOfTheContractOrLeg1]
    notionalAmountOfLeg2 Max30D5Number (0..1)
        [ruleReference NotionalAmountOfLeg2]
    notionalCurrencyOfLeg2 ISOCurrencyCodeEnum (0..1)
        [ruleReference NotionalCurrencyOfLeg2]
    totalNotionalQuantityOfTheContractOrLeg1 Max30D5Number (0..1)
        [ruleReference TotalNotionalQuantityOfTheContractOrLeg1]
    quantityUnitOfMeasureForTheContractOrLeg1 Max4Text (0..1)
        [ruleReference QuantityUnitOfMeasureForTheContractOrLeg1]
    notionalQuantityOfTheContractOrLeg1 Max30D5Number (0..1)
        [ruleReference NotionalQuantityOfTheContractOrLeg1]
    quantityFrequencyOfTheContractOrLeg1 Max4Text (0..1)
        [ruleReference QuantityFrequencyOfTheContractOrLeg1]
    quantityFrequencyMultiplierOfTheContractOrLeg1 Max3Number (0..1)
        [ruleReference QuantityFrequencyMultiplierOfTheContractOrLeg1]
    totalNotionalQuantityLeg2 Max30D5Number (0..1)
        [ruleReference TotalNotionalQuantityOfLeg2]
    quantityUnitOfMeasureLeg2 Max4Text (0..1)
        [ruleReference QuantityUnitOfMeasureLeg2]
    notionalQuantityOfLeg2 Max30D5Number (0..1)
        [ruleReference NotionalQuantityOfLeg2]
    quantityFrequencyOfLeg2 Max4Text (0..1)
        [ruleReference QuantityFrequencyOfLeg2]
    quantityFrequencyMultiplierOfLeg2 Max3Number (0..1)
        [ruleReference QuantityFrequencyMultiplierOfLeg2]
    callAmount Max30D5Number (0..1)
        [ruleReference CallAmount]
    callCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference CallCurrency]
    putAmount Max30D5Number (0..1)
        [ruleReference PutAmount]
    putCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference PutCurrency]
    price PriceAndNotation (0..1)
    priceCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference PriceCurrency]
    priceUnitOfMeasure Max4Text (0..1)
        [ruleReference PriceUnitOfMeasure]
    priceSchedule PriceScheduleReport (0..*)
        [ruleReference ContractPriceSchedule]
    strikePrice StrikePriceAndNotation (0..1)
    strikePriceSchedule StrikePriceScheduleReport (0..*)
        [ruleReference StrikePriceSchedule]
    optionPremiumAmount ShortFraction5DecimalNumber (0..1)
        [ruleReference OptionPremiumAmount]
    optionPremiumCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference OptionPremiumCurrency]
    exchangeRate Max18D13Number (0..1)
        [ruleReference ExchangeRate]
    exchangeRateBasis ExchangeRateBasisStringFormat (0..1)
        [ruleReference ExchangeRateBasis]
    fixedRateDayCountConventionOfLeg1 InterestComputationMethod4Code (0..1)
        [ruleReference FixedRateDayCountConventionOfLeg1]
    fixedRateDayCountConventionOfLeg2 InterestComputationMethod4Code (0..1)
        [ruleReference FixedRateDayCountConventionOfLeg2]
    floatingRateDayCountConventionOfLeg1 InterestComputationMethod4Code (0..1)
        [ruleReference FloatingRateDayCountConventionOfLeg1]
    floatingRateDayCountConventionOfLeg2 InterestComputationMethod4Code (0..1)
        [ruleReference FloatingRateDayCountConventionOfLeg2]
    floatingRateResetFrequencyPeriodOfLeg1 Max4Text (0..1)
		[ruleReference FloatingRateResetFrequencyPeriodOfLeg1]
    floatingRateResetFrequencyPeriodMultiplierOfLeg1 Max3Number (0..1)
        [ruleReference FloatingRateResetFrequencyPeriodMultiplierOfLeg1]
    floatingRateResetFrequencyPeriodOfLeg2 Max4Text (0..1)
		[ruleReference FloatingRateResetFrequencyPeriodOfLeg2]
    floatingRateResetFrequencyPeriodMultiplierOfLeg2 Max3Number (0..1)
        [ruleReference FloatingRateResetFrequencyPeriodMultiplierOfLeg2]
    fixedRatePaymentFrequencyPeriodOfLeg1 Frequency13Code__1 (0..1)
        [ruleReference FixedRatePaymentFrequencyPeriodOfLeg1]
    fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 Max3Number (0..1)
        [ruleReference FixedRatePaymentFrequencyPeriodMultiplierOfLeg1]
    fixedRatePaymentFrequencyPeriodOfLeg2 Frequency13Code__1 (0..1)
        [ruleReference FixedRatePaymentFrequencyPeriodOfLeg2]
    fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 Max3Number (0..1)
        [ruleReference FixedRatePaymentFrequencyPeriodMultiplierOfLeg2]
    floatingRatePaymentFrequencyPeriodOfLeg1 Frequency13Code__1 (0..1)
        [ruleReference FloatingRatePaymentFrequencyPeriodOfLeg1]
    floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 Max3Number (0..1)
        [ruleReference FloatingRatePaymentFrequencyPeriodMultiplierOfLeg1]
    floatingRatePaymentFrequencyPeriodOfLeg2 Frequency13Code__1 (0..1)
        [ruleReference FloatingRatePaymentFrequencyPeriodOfLeg2]
    floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 Max3Number (0..1)
        [ruleReference FloatingRatePaymentFrequencyPeriodMultiplierOfLeg2]
    otherPayment OtherPaymentReport (0..*)
		[ruleReference OtherPayment]
    actionType string (1..1)
        [ruleReference ActionType]
    eventType string (0..1)
        [ruleReference EventType]
    eventDate ISODate (1..1)
        [ruleReference EventDate]
    nonReportable MASNonReportable (0..1)
    technicalRecordId string (0..1)
        [ruleReference TechnicalRecordId]
    counterparty2Name Max105AlphaNumericText (0..1)
        [ruleReference Counterparty2NameDTCC]
    executionAgentOfTheCounterparty1 LEIIdentifier (1..1)
        [ruleReference ExecutionAgentOfTheCounterparty1DTCC]

    condition DTCC_MAS_BR_0001_01: <"Counterparty 1 Condition">
        [docReference MAS DTCC_Specs dataElement "1" field "Counterparty 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM, ERROR, MARU, VALU then [Counterparty 1] must NOT = [Counterparty 2] if [Counterparty 2 identifier type] is = LEI"]
        if counterparty2IdentifierType = True then counterparty1 <> counterparty2

    condition DTCC_MAS_BR_0002_01: <"Counterparty 2 Condition">
        [docReference MAS DTCC_Specs dataElement "2" field "Counterparty 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM, ERROR, MARU, VALU then [Counterparty 1] must NOT = [Counterparty 2] if [Counterparty 2 identifier type] is = LEI"]
        if counterparty2IdentifierType = True then counterparty1 <> counterparty2

    condition DTCC_MAS_BR_0005_01: <"Direction Condition">
        [docReference MAS DTCC_Specs dataElement "5" field "Direction"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Direction of leg 1] and [Direction of leg 2] are both <blank>.
    Reject if [Direction of leg 1] or [Direction of leg 2] are populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and directionOfLeg1 is absent and directionOfLeg2 is absent then direction exists
        else if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and directionOfLeg1 exists and directionOfLeg2 exists then direction is absent

    condition DTCC_MAS_BR_0006_01: <"Direction of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "6" field "Direction of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Direction] is <blank>.
            Reject if [Direction] is populated.
            [Direction of leg 1] must NOT = [Direction of leg 2]"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and direction is absent then directionOfLeg1 exists and directionOfLeg1 <> directionOfLeg2
        else if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and direction exists then directionOfLeg1 is absent

    condition DTCC_MAS_BR_0007_01: <"Direction of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "7" field "Direction of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Direction of leg 1] is populated.
        Reject if [Direction] and [Direction of leg 1] are both <blank>.
        [Direction of leg 1] must NOT = [Direction of leg 2]."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and directionOfLeg1 exists then directionOfLeg2 exists and directionOfLeg1 <> directionOfLeg2
        else if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and direction is absent and directionOfLeg1 is absent then directionOfLeg2 is absent

    condition UtiRequired:
        [docReference MAS Trade dataElement "10" field "Unique transaction identifier"
        provision "UTI is required (Global UTI or Proprietary format)."]
        required choice uniqueTransactionIdentifier, uniqueTransactionIdentifierProprietary

    condition DTCC_MAS_BR_0010_01: <"Unique transaction identifier Condition">
        [docReference MAS DTCC_Specs dataElement "10" field "Unique transaction identifier"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then [Unique transaction identifier] must NOT = [Prior UTI]
        Reject if [Action Type] = 'NEWT' and Proprietary ID tag is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (uniqueTransactionIdentifier <> priorUTI and uniqueTransactionIdentifierProprietary <> priorUTIProprietary)
        and if actionType = ActionTypeEnum -> NEWT to-string
                    then uniqueTransactionIdentifierProprietary is absent

    condition DTCC_MAS_BR_0012_01: <"Prior UTI Condition">
        [docReference MAS DTCC_Specs dataElement "12" field "Prior UTI"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Action type] = NEWT AND [Event type] = ALOC.
        Required if: [Action type] = NEWT or 'MODI' AND [Event type] = INCP'.
        [Prior UTI] must NOT Equal [UTI]"]
        (if actionType = ActionTypeEnum -> NEWT to-string and eventType = EventTypeEnum -> ALOC to-string then required choice priorUTI, priorUTIProprietary
        else if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string] any = actionType and eventType = EventTypeEnum -> INCP to-string then required choice priorUTI, priorUTIProprietary)
        and priorUTI <> uniqueTransactionIdentifier and priorUTIProprietary <> uniqueTransactionIdentifierProprietary

    condition DTCC_MAS_BR_0015_01: <"Underlying identification type Condition">
        [docReference MAS DTCC_Specs dataElement "15.2" field "Underlying identification type"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Underlying] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if underlying exists then underlyingIdentificationType exists

    condition DTCC_MAS_BR_0015_02: <"Underlying identification type Condition">
        [docReference MAS DTCC_Specs dataElement "15.2" field "Underlying identification type"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the baskets constituents] or [Source of the identifier of the basket constituents] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if basketConstituents -> identifier exists or basketConstituents -> source exists then underlyingIdentificationType exists

    condition DTCC_MAS_BR_0015_05: <"Underlying identification type Condition">
        [docReference MAS DTCC_Specs dataElement "15.3" field "Underlier ID (Other)"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Underlier ID (Other) Source] is populated.
        [Underlier ID (Other)] must be = Underlier ID (Other) source."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
         and assetClass = "COMM" then if underlyingIdOtherSource exists then (underlyingIdOther exists and underlyingIdOther = underlyingIdOtherSource to-string)

    condition DTCC_MAS_BR_0015_03: <"Underlier ID (Other) source Condition">
        [docReference MAS DTCC_Specs dataElement "15.4" field "Underlier ID (Other) source"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Underlier ID (Other)] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if underlyingIdOther exists then underlyingIdOtherSource exists

    condition DTCC_MAS_BR_0015_04: <"Name of the underlying index Condition">
        [docReference MAS DTCC_Specs dataElement "15.5" field "Name of the underlying index"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if Underlying identification type is = 'X' and [Underlying] is blank."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if underlyingIdentificationType = "X" and underlying is absent then nameOfTheUnderlyingIndex exists

    condition DTCC_MAS_BR_0016_01: <"Fixed rate of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "16" field "Fixed rate of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [UPI.Intrument type] = Swap and [UPI. Asset class] = Interest_Rate and [UPI.Product] = Fixed_Fixed or Cross_Currency_Fixed_Fixed."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum->Rates and nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Swap and (nonReportable->postUpiData->Header->UseCase = AnnaDsbUseCaseEnum ->Fixed_Fixed or nonReportable->postUpiData->Header->UseCase = AnnaDsbUseCaseEnum ->Cross_Currency_Fixed_Fixed) then fixedRateOfLeg1 exists
        
    condition DTCC_MAS_BR_0016_02: <"Fixed rate of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "16" field "Fixed rate of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [UPI.Intrument type] = Forward and [UPI. Asset class] = Interest_Rate and [UPI.Product] =  FRA_Index."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum->Rates and nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Forward and nonReportable->postUpiData->Header->UseCase = AnnaDsbUseCaseEnum ->FRA_Index then fixedRateOfLeg1 exists
        
    condition DTCC_MAS_BR_0019_01: <"Spread of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "19" field "Spread of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 1] AND [Fixed rate of leg 2] AND [Spread - Leg 2] = <blank>.Reject if [Fixed rate of leg 1] is NOT <blank>."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg1 is absent and fixedRateOfLeg2 is absent and spreadOfLeg2 is absent then
            (spreadOfLeg1 -> spreadOfLeg1Monetary exists or 
                spreadOfLeg1 -> spreadOfLeg1Decimal exists or 
                spreadOfLeg1 -> spreadOfLeg1Basis exists)
        else if fixedRateOfLeg1 exists then 
            (spreadOfLeg1 -> spreadOfLeg1Monetary is absent and 
                spreadOfLeg1 -> spreadOfLeg1Decimal is absent and 
                spreadOfLeg1 -> spreadOfLeg1Basis is absent)

    condition DTCC_MAS_BR_0019_02: <"Spread of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "19" field "Spread of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price] AND [Spread - Leg 2] = <blank>."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and price is absent and spreadOfLeg2 is absent then
            (spreadOfLeg1 -> spreadOfLeg1Monetary exists or 
                spreadOfLeg1 -> spreadOfLeg1Decimal exists or 
                spreadOfLeg1 -> spreadOfLeg1Basis exists)

    condition DTCC_MAS_BR_0020_01: <"Spread notation of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "20" field "Spread notation of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Spread of leg 1] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and (spreadOfLeg1 -> spreadOfLeg1Monetary exists
                    or spreadOfLeg1 -> spreadOfLeg1Decimal exists
                    or spreadOfLeg1 -> spreadOfLeg1Basis exists)
        then spreadOfLeg1 -> spreadNotationOfLeg1 exists

    condition DTCC_MAS_BR_0021_01: <"Spread currency of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "21" field "Spread currency of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Spread notation of leg 1] = '1'.Reject if [Spread notation of leg 1] = '3' or '4'. Reject if [Spread currency of leg 1] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if spreadOfLeg1 -> spreadNotationOfLeg1 = PriceNotationEnum -> Monetary
            then spreadOfLeg1 -> spreadCurrencyOfLeg1 exists
            else if (spreadOfLeg1 -> spreadNotationOfLeg1 = PriceNotationEnum -> Decimal or spreadOfLeg1 -> spreadNotationOfLeg1 = PriceNotationEnum -> Basis)
            then spreadOfLeg1 -> spreadCurrencyOfLeg1 is absent
            else if ["XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XDR", "XEU", "XFU", "XPD", "XPT"] any = spreadOfLeg1 -> spreadCurrencyOfLeg1
            then False)

    condition DTCC_MAS_BR_0022_01: <"Fixed rate of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "22" field "Fixed rate of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [UPI.Intrument type] = Swap and [UPI. Asset class] = Interest_Rate and [UPI.Product] = Fixed_Fixed or Cross_Currency_Fixed_Fixed."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum->Rates and nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Swap and (nonReportable->postUpiData->Header->UseCase = AnnaDsbUseCaseEnum ->Fixed_Fixed or nonReportable->postUpiData->Header->UseCase = AnnaDsbUseCaseEnum ->Cross_Currency_Fixed_Fixed) then fixedRateOfLeg2 exists

    condition DTCC_MAS_BR_0025_01: <"Spread of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "25" field "Spread of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 1] AND [Fixed rate of leg 2] AND [Spread - Leg 1] is <blank>.Reject if [Fixed rate of leg 2] is NOT <blank>."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg1 is absent and fixedRateOfLeg2 is absent and spreadOfLeg1 is absent then
            (spreadOfLeg2 -> spreadOfLeg2Monetary exists or 
                spreadOfLeg2 -> spreadOfLeg2Decimal exists or 
                spreadOfLeg2 -> spreadOfLeg2Basis exists)
        else if fixedRateOfLeg2 exists then 
            (spreadOfLeg2 -> spreadOfLeg2Monetary is absent and 
                spreadOfLeg2 -> spreadOfLeg2Decimal is absent and 
                spreadOfLeg2 -> spreadOfLeg2Basis is absent)

    condition DTCC_MAS_BR_0025_02: <"Spread of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "25" field "Spread of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price] AND [Spread - Leg 1] = <blank>."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and price is absent and spreadOfLeg1 is absent then
            (spreadOfLeg2 -> spreadOfLeg2Monetary exists or 
                spreadOfLeg2 -> spreadOfLeg2Decimal exists or 
                spreadOfLeg2 -> spreadOfLeg2Basis exists)

    condition DTCC_MAS_BR_0026_01: <"Spread notation of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "26" field "Spread notation of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Spread of leg 2] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and (spreadOfLeg2 -> spreadOfLeg2Monetary exists
                    or spreadOfLeg2 -> spreadOfLeg2Decimal exists
                    or spreadOfLeg2 -> spreadOfLeg2Basis exists)
        then spreadOfLeg2 -> spreadNotationOfLeg2 exists

    condition DTCC_MAS_BR_0027_01: <"Spread currency of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "27" field "Spread currency of leg 2"
        provision "when [Action Type] = NEWT, MODI, CORR, REVI then Required if [Spread notation of Leg 2] = '1'.
            Reject if [Spread notation of Leg 2] = '3' or '4'
            Reject if [Spread currency of leg 2] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD, or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if spreadOfLeg2 -> spreadNotationOfLeg2 = PriceNotationEnum -> Monetary
            then spreadOfLeg2 -> spreadCurrencyOfLeg2 exists
            else if (spreadOfLeg2 -> spreadNotationOfLeg2 = PriceNotationEnum -> Decimal or spreadOfLeg2 -> spreadNotationOfLeg2 = PriceNotationEnum -> Basis)
            then spreadOfLeg2 -> spreadCurrencyOfLeg2 is absent
            else if ["XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XDR", "XEU", "XFU", "XPD", "XPT"] any = spreadOfLeg1 -> spreadCurrencyOfLeg1
            then False)

    condition DTCC_MAS_BR_0030_01: <"First exercise  date Condition">
        [docReference MAS DTCC_Specs dataElement "30" field "First exercise  date"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then [First exercise date] should be equal to or later than the value in [Effective date. [First exercise date] should be equal to or later than the DATE value in [Execution timestamp]."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then firstExerciseDate >= effectiveDate and firstExerciseDate >= executionTimestamp -> date

    condition DTCC_MAS_BR_0032_01: <"Expiration date Condition">
        [docReference MAS DTCC_Specs dataElement "32" field "Expiration date"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then [Expiration date] should be equal to or later than the value in [Effective date].
            [Expiration date] should be equal to or later than the DATE value in [Execution timestamp]."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then expirationDate exists and expirationDate >= effectiveDate and expirationDate >= executionTimestamp -> date

    condition DTCC_MAS_BR_0036_01: <"Settlement currency of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "36" field "Settlement currency of the contract or leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if [Settlement currency of the contract or leg 1] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        // Note: "XEU" & "XFU" are not part of ISOCurrencyCodeEnum
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] any = settlementCurrency1
        then False

    condition DTCC_MAS_BR_0037_01: <"Settlement currency of the contract or leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "37" field "Settlement currency of the contract or leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if [Settlement currency of leg 2] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        // Note: "XEU" & "XFU" are not part of ISOCurrencyCodeEnum
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] any = settlementCurrency2
        then False

    condition DTCC_MAS_BR_0038_01: <"Final contractual settlement date Condition">
        [docReference MAS DTCC_Specs dataElement "38" field "Final contractual settlement date"
          provision "When [Action Type] = NEWT, MODI, CORR, REVI then [Final contractual settlement date] should be equal to or later than the value in [Effective date]. [Final contractual settlement date] should be equal to or later than the DATE value in [Execution timestamp]."]
         if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then finalContractualSettlementDate exists and finalContractualSettlementDate >= effectiveDate and finalContractualSettlementDate >= executionTimestamp -> date

    condition DTCC_MAS_BR_0040_01: <"Central Counterparty Condition">
        [docReference MAS DTCC_Specs dataElement "40" field "Central Counterparty"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Cleared] = Y. Reject if [Cleared] = 'N'. [Central counterparty] must NOT = [Clearing member]"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and cleared = "Y"
        then centralCounterparty exists and centralCounterparty <> clearingMember
        else if cleared = "N"
        then centralCounterparty is absent

    condition DTCC_MAS_BR_0041_01: <"Clearing member Condition">
        [docReference MAS DTCC_Specs dataElement "41" field "Clearing member"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Cleared] = Y. Reject if [Cleared] = 'N'. [Central counterparty] must NOT = [Clearing member]"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and cleared = "Y"
        then clearingMember exists and centralCounterparty <> clearingMember
        else if cleared = "N"
        then clearingMember is absent

    condition DTCC_MAS_BR_0042_01: <"Clearing timestamp Condition">
        [docReference MAS DTCC_Specs dataElement "42" field "Clearing timestamp"
            provision "when [Action Type] = NEWT, MODI, CORR, REVI then Required if [Cleared] = Y. If [Action type] = NEWT and [Cleared] = Y, the[Execution timestamp] must equal to value in [Clearing timestamp]. Reject If [Cleared] = 'N' or 'I'"]
        if actionType = ActionTypeEnum -> NEWT to-string and cleared = "Y"
        then clearingTimestamp exists and clearingTimestamp = executionTimestamp
        else if [ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and cleared = "Y"
        then clearingTimestamp exists
        else if ["N", "I"] any = cleared
        then clearingMember is absent

    condition DTCC_MAS_BR_0048_01: <"Confirmation timestamp Condition">
        [docReference MAS DTCC_Specs dataElement "48" field "Confirmation timestamp"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Confirmed] = 'ECNF' of 'YCNF'"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["ECNF", "YCNF"] any = confirmed
        then confirmationTimestamp exists

    condition DTCC_MAS_BR_0049_01: <"Execution timestamp Condition">
        [docReference MAS DTCC_Specs dataElement "49" field "Execution timestamp"
            provision "If [Action type] = NEWT and [Cleared] = Y, then [Execution timestamp] must equal to value in [Clearing timestamp]"]
        if actionType = ActionTypeEnum -> NEWT to-string and cleared = "Y"
        then executionTimestamp = clearingTimestamp

    condition DTCC_MAS_BR_0050_01: <"Reporting timestamp Condition">
        [docReference MAS DTCC_Specs dataElement "50" field "Reporting timestamp"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM, PRTO, EROR then [Reporting timestamp] must be equal to or later than the value in [Execution timestamp]. [Reporting timestamp] must be equal to or before the [Message Received timestamp] derived by the TR. Reject if the date value of the [Reporting timestamp] is more than 2 days before the date value of the [Message Received timestamp]. Reject if [Reporting Timestamp] is NOT in equal or incremental order between submissions."]
        [regulatoryReference ISDA ISDAWorkingGroup date "unknown"
            provision "The logic regarding the order between submissions is not modelled. The condition cannot be executed in a stateless environment."]
        //The logic regarding the [Message Received timestamp] is not included as this data is known post submission.
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string, ActionTypeEnum -> PRTO to-string, ActionTypeEnum -> EROR to-string] any = actionType then reportingTimestamp >= executionTimestamp
    
    condition DTCC_MAS_BR_0050_03: <"Reporting timestamp Condition">
        [docReference MAS DTCC_Specs dataElement "50" field "Reporting timestamp"
            provision "When [Action Type] = VALU then [Reporting timestamp] must be equal to or before the [Message Received timestamp] derived by the TR.
            Reject if the date value of the [Reporting timestamp] is more than 2 days before the date value of the [Message Received timestamp].
            [Reporting timestamp] must be equal to or greater than the [Valuation timestamp]."]
        [regulatoryReference ISDA ISDAWorkingGroup date "unknown"
            provision "The logic regarding the order between submissions is not modelled. The condition cannot be executed in a stateless environment."]
        //The logic regarding the [Message Received timestamp] is not included as this data is known post submission.
        if ActionTypeEnum -> VALU to-string = actionType then reportingTimestamp >= valuationTimestamp

condition DTCC_MAS_BR_0052_01: <"Source of the identifier of the basket constituents Condition">
        [docReference MAS DTCC_Specs dataElement "52" field "Source of the identifier of the basket constituents"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if non ISIN values are reported in [Identifier of the basket's constituents]."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then if basketConstituents -> source any <> ProductIdTypeEnum -> ISIN then basketConstituents -> source exists

    condition DTCC_MAS_BR_0054_01: <"Valuation currency Condition">
        [docReference MAS DTCC_Specs dataElement "54" field "Valuation currency"
            provision "When [Action Type] = VALU then Reject if [Valuation currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT"]
        if actionType = ActionTypeEnum -> VALU to-string
                and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] any = valuationCurrency
        then False

    condition DTCC_MAS_BR_0058_01: <"Initial margin collateral portfolio code Condition">
        [docReference MAS DTCC_Specs dataElement "58" field "Initial margin collateral portfolio code"
          provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Variation margin collateral portfolio code] = 'NOAP'. Reject if the value [NOAP]  is submitted in '/Prtfl/Cd'. Note: If the [Initial margin collateral portfolio code] is not applicable to your trade, clients should submit the value [NOAP] to represent 'No Applicable' in '/NoPrtfl' XML."]
        // [NOAP] value for '/Prtfl/Cd' = 'False' value for [Collateral portfolio indicator]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        and variationMarginCollateralPortfolioCode = "NOAP" then initialMarginCollateralPortfolioCode exists and (if collateralPortfolioIndicator = False then initialMarginCollateralPortfolioCode is absent)

    condition DTCC_MAS_BR_0058_03: <"Variation margin collateral portfolio code Condition">
        [docReference MAS DTCC_Specs dataElement "58" field "Variation margin collateral portfolio code"
          provision "When [Action Type] = NEWT, MODI, CORR, REVI then 
          Reject if the value [NOAP]  is submitted in '/Prtfl/Cd'.
          Note: If the [Variation margin collateral portfolio code] is not applicable to your trade, clients must submit the value [NOAP] to represent 'No Applicable' in '/NoPrtfl' XML"]
        //[NOAP] value for '/Prtfl/Cd' = 'False' value for [Collateral portfolio indicator]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then
        (if collateralPortfolioIndicator = False then variationMarginCollateralPortfolioCode is absent
        else variationMarginCollateralPortfolioCode exists)

    condition DTCC_MAS_BR_0076_01: <"Notional amount of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "76" field "Notional amount of the contract or leg 1"
          provision "When [Action Type] = NEWT, MODI, CORR, REVI then If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Notional amount of the contract or leg 1] MUST = [Call amount] or [Put Amount]. If [Asset Class] = CRDT, EQUI, CURR, INTR, reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then
            (if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option then [callAmount, putAmount] any = notionalAmountOfTheContractOrLeg1
            else if ["CRDT", "EQUI", "CURR", "INTR"] any = assetClass then notionalAmountOfTheContractOrLeg1 exists and notionalAmountOfTheContractOrLeg1 >= 0)
    
    condition DTCC_MAS_BR_0077_01: <"Notional currency of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "77" field "Notional currency of the contract or leg 1"
          provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Notional amount of the contract or leg 1] is populated. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Notional amount of the contract or leg 1] MUST = [Call currency] or [Put currency]. Reject if Notional amount of the contract or leg 1] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and notionalAmountOfTheContractOrLeg1 exists
        then (notionalCurrencyOfTheContractOrLeg1 exists and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> notionalCurrencyOfTheContractOrLeg1 and if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option then [callCurrency, putCurrency] any = notionalCurrencyOfTheContractOrLeg1)

    condition DTCC_MAS_BR_0078_01: <"Notional amount of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "78" field "Notional amount of leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Direction 2 - Leg 2] is populated. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Notional amount of Leg 2] MUST = [Call amount] or [Put Amount]. If [Asset Class] = CRDT, EQUI, CURR, INTR, reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if directionOfLeg2 exists
            then notionalAmountOfLeg2 exists and notionalAmountOfLeg2 >=0
                    and if (nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option)
                        then [callAmount, putAmount] any = notionalAmountOfLeg2

    condition DTCC_MAS_BR_0079_01: <"Notional currency of  leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "79" field "Notional currency of  leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Notional amount of leg 2] is populated. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Notional Currency of Leg 2] MUST = [Call currency] or [Put currency]. Reject if [Notional currency of Leg 2] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and notionalAmountOfLeg2 exists
        then (notionalCurrencyOfLeg2 exists and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> notionalCurrencyOfTheContractOrLeg1 
            and if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option then [callCurrency, putCurrency] any = notionalCurrencyOfLeg2)

    condition DTCC_MAS_BR_0080_01: <"Total notional quantity of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "80" field "Total notional quantity of the contract or leg 1"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then totalNotionalQuantityOfTheContractOrLeg1 exists and totalNotionalQuantityOfTheContractOrLeg1 >= 0

    condition DTCC_MAS_BR_0081_01: <"Quantity unit of measure for the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "81" field "Quantity unit of measure for the contract or leg 1"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Total notional quantity of leg 1] is populated AND value does NOT = '9999999999999999999999999'."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and totalNotionalQuantityOfTheContractOrLeg1 exists and totalNotionalQuantityOfTheContractOrLeg1 <> 9999999999999999999999999 then quantityUnitOfMeasureForTheContractOrLeg1 exists

    condition DTCC_MAS_BR_0082_01: <"Notional quantity of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "82" field "Notional quantity of the contract or leg 1"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then [Notional quantity - Leg 1] must NOT be greater then the [Total notional quantity - Leg 1]. Reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then notionalQuantityOfTheContractOrLeg1 exists and notionalQuantityOfTheContractOrLeg1 <= totalNotionalQuantityOfTheContractOrLeg1 and notionalQuantityOfTheContractOrLeg1 > 0

    condition DTCC_MAS_BR_0084_01: <"Quantity frequency multiplier of the contract or leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "84" field "Quantity frequency multiplier of the contract or leg 1"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Quantity frequency of the contract or leg 1] is populated with 'HOUL', 'DAIL', 'WEEK', 'MNTH', 'QURT', 'MIAN', 'YEAR' or 'EXPI'. 
            Reject if [Quantity frequency of the contract or leg 1] is populated with 'ODMD'. 
            Reject if Negative."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["HOUL", "DAIL", "WEEK", "MNTH", "QURT", "MIAN", "YEAR", "EXPI"] any = quantityFrequencyOfTheContractOrLeg1 then quantityFrequencyMultiplierOfTheContractOrLeg1 exists and quantityFrequencyMultiplierOfTheContractOrLeg1 > 0
        else if quantityFrequencyOfTheContractOrLeg1 = "ODMD" then quantityFrequencyMultiplierOfTheContractOrLeg1 is absent

    condition DTCC_MAS_BR_0085_01: <"Total notional quantity of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "85" field "Total notional quantity of leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then totalNotionalQuantityLeg2 exists and totalNotionalQuantityLeg2 >= 0

    condition DTCC_MAS_BR_0086_01: <"Quantity unit of measure of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "86" field "Quantity unit of measure of leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Total notional quantity of leg 2] is populated AND value does NOT = '9999999999999999999999999'."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and totalNotionalQuantityLeg2 exists and totalNotionalQuantityLeg2 <> 9999999999999999999999999 then quantityUnitOfMeasureLeg2 exists

    condition DTCC_MAS_BR_0087_01: <"Notional quantity of  leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "87" field "Notional quantity of  leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Total notional quantity - Leg 2] is populated. [Notional quantity - Leg 2] must NOT be greater then the [Total notional quantity - Leg 2]. Reject if Negative. Note: '9999999999999999999999999' is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and totalNotionalQuantityLeg2 exists
        then notionalQuantityOfLeg2 exists and notionalQuantityOfLeg2 < totalNotionalQuantityLeg2 and notionalQuantityOfLeg2 > 0

    condition DTCC_MAS_BR_0088_01: <"Quantity frequency of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "88" field "Quantity frequency of leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Notional quantity of leg 2] is populated."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then if notionalQuantityOfLeg2 exists then quantityFrequencyOfLeg2 exists

    condition DTCC_MAS_BR_0089_01: <"Quantity frequency multiplier of leg 2 Condition">
        [docReference MAS DTCC_Specs dataElement "89" field "Quantity frequency multiplier of leg 2"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Quantity frequency of leg 2] is populated with 'HOUL', 'DAIL', 'WEEK', 'MNTH', 'QURT', 'MIAN', 'YEAR' or 'EXPI'.
            Reject if [Quantity frequency of leg 2] is populated with 'ODMD'.
            Reject if Negative."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["HOUL", "DAIL", "WEEK", "MNTH", "QURT", "MIAN", "YEAR", "EXPI"] any = quantityFrequencyOfLeg2 then quantityFrequencyMultiplierOfLeg2 exists and quantityFrequencyMultiplierOfLeg2 > 0
        else if quantityFrequencyOfLeg2 = "ODMD" then quantityFrequencyMultiplierOfLeg2 is absent

    condition DTCC_MAS_BR_0090_01: <"Call amount Condition">
        [docReference MAS DTCC_Specs dataElement "90" field "Call amount"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [UPI.Product] does NOT = Digital_Option. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Call amount] MUST = [Notional amount of the contract or leg 1] or [Notional amount of leg 2]. Reject if Negative or Zero."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option
            then [notionalAmountOfTheContractOrLeg1, notionalAmountOfLeg2] any = callAmount and callAmount > 0

    condition DTCC_MAS_BR_0091_01: <"Call currency Condition">
        [docReference MAS DTCC_Specs dataElement "91" field "Call currency"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Call amount] is populated AND value does NOT = '9999999999999999999999999'. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Call currency] MUST = [Notional currency of the contract or leg 1] or [Notional amount of leg 2]. Reject if [Call currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and callAmount exists
                and callAmount <> 9999999999999999999999999
        then callCurrency exists
                and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> callCurrency
                and if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option
                    then [notionalCurrencyOfTheContractOrLeg1, notionalCurrencyOfLeg2] any = callCurrency

    condition DTCC_MAS_BR_0092_01: <"Put amount Condition">
            [docReference MAS DTCC_Specs dataElement "92" field "Put amount"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI thenRequired if [UPI.Product] does NOT = Digital_Option. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Put amount] MUST = [Notional amount of the contract or leg 1] or [Notional amount of leg 2]. Reject if Negative or Zero."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option
            then [notionalAmountOfTheContractOrLeg1, notionalAmountOfLeg2] any = putAmount and putAmount > 0

    condition DTCC_MAS_BR_0093_01: <"Put currency Condition">
        [docReference MAS DTCC_Specs dataElement "93" field "Put currency"
            provision "Required if [Put amount] is populated AND value does NOT = '9999999999999999999999999'. If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Put currency] MUST = [Notional currency of the contract or leg 1] or [Notional currency - Leg 2].
Reject if [Put currency] = 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XDR', 'XEU', 'XFU', 'XPD' or 'XPT'"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and putAmount exists
                and putAmount <> 9999999999999999999999999
        then putCurrency exists
                and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> putCurrency
                and if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option
                    then [notionalCurrencyOfTheContractOrLeg1, notionalCurrencyOfLeg2] any = putCurrency

    condition DTCC_MAS_BR_0094_01: <"Price Condition">
        [docReference MAS DTCC_Specs dataElement "94" field "Price"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Note: '999999999999999999' (for Monetary values) or '99999999999' (for Decimal) is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                    and ((assetClass = "INTR" and contractType = "CFDS")
                or (["EQUI", "COMM"] any = assetClass and ["CFDS", "FORW"] any = contractType))
        then price exists

    condition DTCC_MAS_BR_0094_02: <"Price Condition">
        [docReference MAS DTCC_Specs dataElement "94" field "Price"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate - Leg 1], [Fixed rate - Leg 2], [Spread - Leg 1], [Spread - Leg 2], [Strike price], [Option premium amount] are all <blank>. Required if [Price schedules - Price in effect between the unadjusted effective date and unadjusted end date inclusive] is provided. Note: '999999999999999999' (for Monetary values) or '99999999999' (for Decimal) is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ((assetClass = "INTR" and ["FORW", "OTHR"] any = contractType) or (["EQUI", "COMM"] any = assetClass and "OTHR" = contractType))
        then (if fixedRateOfLeg1 is absent
                    and fixedRateOfLeg2 is absent
                    and spreadOfLeg1 is absent
                    and spreadOfLeg2 is absent
                    and strikePrice is absent
                    and optionPremiumAmount is absent
            then price exists
            else if priceSchedule -> priceMonetary exists
                    or priceSchedule -> priceDecimal exists
            then price exists)

    condition DTCC_MAS_BR_0094_03: <"Price Condition">
        [docReference MAS DTCC_Specs dataElement "94" field "Price"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Spread - Leg 1] AND [Spread - Leg 2] are NOT populated. Required if [Price schedules - Price in effect between the unadjusted effective date and unadjusted end date inclusive] is provided. Note: '999999999999999999' (for Monetary values) or '99999999999' (for Decimal) is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and ["EQUI", "COMM"] any = assetClass
                and contractType = "SWAP"
        then (if spreadOfLeg1 is absent and spreadOfLeg2 is absent
            then price exists
            else if priceSchedule -> priceMonetary exists
                    or priceSchedule -> priceDecimal exists
            then price exists)

    condition DTCC_MAS_BR_0095_01: <"Price currency Condition">
        [docReference MAS DTCC_Specs dataElement "95" field "Price currency"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price notation] = 1. Reject if [Price notation] = '3'. Reject if [Price currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if price -> priceNotation = PriceNotationEnum -> Monetary
            then priceCurrency exists
                    and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> priceCurrency
            else if price -> priceNotation = PriceNotationEnum -> Decimal
            then priceCurrency is absent)

    condition DTCC_MAS_BR_0096_01: <"Price notation Condition">
        [docReference MAS DTCC_Specs dataElement "96" field "Price notation"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price] is populated. Required if [Price schedules - Price in effect between the unadjusted effective date and unadjusted end date inclusive] is provided."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then
            (if price exists then price -> priceNotation exists
            else if priceSchedule -> priceMonetary exists
                    or priceSchedule -> priceDecimal exists
            then price exists)

    condition DTCC_MAS_BR_0097_01: <"Price unit of measure Condition">
        [docReference MAS DTCC_Specs dataElement "97" field "Price unit of measure"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price] is populated and NOT equal to '999999999999999999' or '9999999999999'."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and price exists
                and (price -> priceMonetary <> 999999999999999999 or price -> priceDecimal <> 9999999999999)
        then priceUnitOfMeasure exists

    condition DTCC_MAS_BR_0098_01: <"Unadjusted effective date of the price (price schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "98" field "Unadjusted effective date of the price (price schedule where applicable)"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Price schedules - Price in effect between the unadjusted effective date and unadjusted end date inclusive] is populated. Reject if the for Price schedules, the number of Price and Effective date does not match. Reject if the for Price schedules, if the End Date is provided and the number of Price and Effective date and End date values does not match. Reject if the Effective dates submitted are not in ascending order. Reject if the Effective dates submitted are not greater then the End Dates of the previous payment schedule."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if priceSchedule -> priceMonetary exists
                    or priceSchedule -> priceDecimal exists
            then (priceSchedule -> effectiveDate exists
                    and priceSchedule -> priceMonetary count
                        = priceSchedule -> effectiveDate count
                    or priceSchedule -> priceDecimal count
                        = priceSchedule -> effectiveDate count))

    condition DTCC_MAS_BR_0099_01: <"Unadjusted end date of the price  (price schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "99" field "Unadjusted end date of the price  (price schedule where applicable)"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if the for Price schedules, the number of Price and Effective date does not match. Reject if the for Price schedules, if the End Date is provided and the number of Price and Effective date and End date values does not match. Reject if the End dates submitted are not in ascending order."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and priceSchedule -> endDate exists
        then (priceSchedule -> priceMonetary count = priceSchedule -> endDate count
                or priceSchedule -> priceDecimal count = priceSchedule -> endDate count)

    condition DTCC_MAS_BR_0100_01: <"Price in effect between the unadjusted effective date and end date (price schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "100" field "Price in effect between the unadjusted effective date and end date (price schedule where applicable)"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if the for Price schedules, the number of Price and Effective date does not match. Reject if the for Price schedules, if the End Date is provided and the number of Price and Effective date and End date values does not match. Note: '999999999999999999' (for Monetary values) or '99999999999' (for Decimal) is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then ((priceSchedule -> effectiveDate count = priceSchedule -> priceMonetary count
                or priceSchedule -> effectiveDate count = priceSchedule -> priceDecimal count)
                and (priceSchedule -> endDate count = priceSchedule -> priceMonetary count
                    or priceSchedule -> endDate count = priceSchedule -> priceDecimal count))

    condition DTCC_MAS_BR_0101_01: <"Strike price Condition">
        [docReference MAS DTCC_Specs dataElement "101" field "Strike price"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [UPI.valuation method or trigger] does NOT = Barrier or Digital Barrier. Note: '999999999999999999' (for Monetary values) or '99999999999' (for Decimal) is accepted when the value is not available at the time of reporting."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        and (nonReportable -> postUpiData -> Derived -> ValuationMethodorTrigger <> AnnaDsbValuationMethodorTriggerEnum -> Barrier or nonReportable -> postUpiData -> Derived -> ValuationMethodorTrigger <> AnnaDsbValuationMethodorTriggerEnum -> Digital_Barrier) then strikePrice exists

    condition DTCC_MAS_BR_0102_01: <"Strike price currency Condition">
        [docReference MAS DTCC_Specs dataElement "102" field "Strike price currency"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if [Strike Price - Currency 1] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if ["XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XDR", "XEU", "XFU", "XPD", "XPT"] any = SubString(strikePrice -> strikePriceCurrency, 1, 3)
        then False 

    condition DTCC_MAS_BR_0102_02: <"Strike price currency Condition">
        [docReference MAS DTCC_Specs dataElement "102" field "Strike price currency"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Strike price notation] = 1. Reject if [Strike price currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and strikePrice -> strikePriceNotation = PriceNotationEnum -> Monetary then strikePrice -> strikePriceCurrency exists

    condition DTCC_MAS_BR_0102_03: <"Strike price currency Condition">
        [docReference MAS DTCC_Specs dataElement "102" field "Strike price currency"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if [Strike Price - Currency 2] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then if ["XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XDR", "XEU", "XFU", "XPD", "XPT"] any = SubString(strikePrice -> strikePriceCurrency, 5, 3)
        then False 

    condition DTCC_MAS_BR_0103_01: <"Strike price notation Condition">
        [docReference MAS DTCC_Specs dataElement "103" field "Strike price notation"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Strike price] is populated. Note: For FX [Strike price notation] can only be reported with the value 3"]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and strikePrice exists
        then (strikePrice -> strikePriceNotation exists and if assetClass = "CURR" then strikePrice -> strikePriceNotation = PriceNotationEnum -> Decimal)

    condition DTCC_MAS_BR_0104_01: <"Effective date of the strike price (strike price schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "104" field "Effective date of the strike price (strike price schedule where applicable)"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Strike price schedules - Strike price in effect between the unadjusted effective date and unadjusted end date inclusive] is populated.
            Reject if the for Strike Price schedules, the number of Strike Price and Effective date values does not match.
            Reject if the for Strike Price schedules, if the End Date is provided and  the number of Strike Price and Effective date and End date values does not match.
            Reject if the Effective dates submitted are not in ascending order.
            Reject if the Effective dates submitted are not greater then the End Dates of the previous payment schedule."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateMonetary exists
                    or strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateDecimal exists
            then (strikePriceSchedule -> effectiveDate exists
                    and (strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateMonetary count
                            = strikePriceSchedule -> effectiveDate count
                        or strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateDecimal count
                            = strikePriceSchedule -> effectiveDate count)))

    condition DTCC_MAS_BR_0105_01: <"End date of the strike price (strike price schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "105" field "End date of the strike price (strike price schedule where applicable)"
            provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if the for Strike Price schedules, the number of Strike Price and Effective date values does not match. Reject if the for Strike Price schedules, if the End Date is provided and  the number of Strike Price and Effective date and End date values does not match. Reject if End dates submitted are not in ascending order."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and strikePriceSchedule -> endDate exists
        then (strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateMonetary count
                    = strikePriceSchedule -> endDate count
                or strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateDecimal count
                    = strikePriceSchedule -> endDate count)

condition DTCC_MAS_BR_0106_01: <"Strike price in effect on associated effective date (strike priice schedule where applicable) Condition">
        [docReference MAS DTCC_Specs dataElement "106" field "Strike price in effect on associated effective date (strike priice schedule where applicable)" 
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if the for Strike Price schedules, the number of Strike Price and Effective date values does not match. Reject if the for Strike Price schedules, if the End Date is provided and  the number of Strike Price and Effective date and End date values does not match."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then ((strikePriceSchedule -> effectiveDate count
                        = strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateMonetary count
                    or strikePriceSchedule -> effectiveDate count
                        = strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateDecimal count)
                and (strikePriceSchedule -> endDate count
                        = strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateMonetary count
                    or strikePriceSchedule -> endDate count
                        = strikePriceSchedule -> strikePriceInEffectOnAssociatedEffectiveDateDecimal count))

condition DTCC_MAS_BR_0107_01: <"Option premium amount Condition">
    [docReference MAS DTCC_Specs dataElement "107" field "Option premium amount"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if Negative"]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType then optionPremiumAmount > 0

condition DTCC_MAS_BR_0108_01: <"Option premium currency Condition">
        [docReference MAS DTCC_Specs dataElement "108" field "Option premium currency"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Option premium amount] is greater than Zero. Reject if [Option premium currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if optionPremiumAmount exists and optionPremiumAmount > 0
            then optionPremiumCurrency exists
                    and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] all <> optionPremiumCurrency)

condition DTCC_MAS_BR_0109_01: <"Exchange rate Condition">
    [docReference MAS DTCC_Specs dataElement "109" field "Exchange rate"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Reject if Negative"]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and assetClass = "CURR" then exchangeRate exists and exchangeRate > 0

condition DTCC_MAS_BR_0110_01: <"Exchange rate basis Condition">
        [docReference MAS DTCC_Specs dataElement "110" field "Exchange rate basis"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then If [UPI.Intrument type] = Option and [UPI. Asset class] = Foreign_Exchange and [UPI.Product] does NOT = Digital_Option, [Exchange Rate Basis Currency 2] MUST equal [Notional currency - Leg 1] or [Notional currency - Leg 2]
        Reject if [Exchange Rate Basis Currency 1] = [Exchange Rate Basis Currency 2]
        Reject if [Exchange Rate Basis Currency 1] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
        then (if nonReportable->postUpiData->Header->InstrumentType = AnnaDsbInstrumentTypeEnum ->Option and nonReportable->postUpiData->Header->AssetClass = AnnaDsbAssetClassEnum ->Foreign_Exchange and nonReportable->postUpiData->Header->UseCase <> AnnaDsbUseCaseEnum ->Digital_Option then
            SubString(exchangeRateBasis, 1, 3)
                        = notionalCurrencyOfTheContractOrLeg1 to-string
                    or SubString(exchangeRateBasis, 1, 3) = notionalCurrencyOfLeg2 to-string)
                and (SubString(exchangeRateBasis, 1, 3) <> SubString(exchangeRateBasis, 5, 3))
                and (["XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XDR", "XEU", "XFU", "XPD", "XPT"] all <> SubString(exchangeRateBasis, 1, 3))

condition DTCC_MAS_BR_0111_01: <"Fixed rate day count convention  of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "111" field "Fixed rate day count convention  of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 1] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg1 exists then fixedRateDayCountConventionOfLeg1 exists

condition DTCC_MAS_BR_0112_01: <"Fixed rate day count convention  of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "112" field "Fixed rate day count convention  of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg2 exists then fixedRateDayCountConventionOfLeg2 exists

condition DTCC_MAS_BR_0113_01: <"Floating rate day count convention of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "113" field "Floating rate day count convention of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the floating rate of leg 1] or [Name of the floating rate of leg 1] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and (identifierOfFloatingRateOfLeg1 exists or nameOfTheFloatingRateOfLeg1 exists) then floatingRateDayCountConventionOfLeg1 exists

condition DTCC_MAS_BR_0114_01: <"Floating rate day count convention of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "114" field "Floating rate day count convention of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the floating rate of leg 2] or [Name of the floating rate of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and (identifierOfFloatingRateOfLeg2 exists or nameOfTheFloatingRateOfLeg2 exists) then floatingRateDayCountConventionOfLeg2 exists

condition DTCC_MAS_BR_0115_01: <"Floating rate reset frequency period of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "115" field "Floating rate reset frequency period of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Floating rate reset frequency period multiplier of leg 1] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and floatingRateResetFrequencyPeriodMultiplierOfLeg1 exists then floatingRateResetFrequencyPeriodOfLeg1 exists

condition DTCC_MAS_BR_0116_01: <"Floating rate reset frequency period multiplier of leg 1 Condition">
        [docReference MAS DTCC_Specs dataElement "116" field "Floating rate reset frequency period multiplier of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Floating rate reset frequency period of leg 1] is populate with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'. Reject if [Floating rate reset frequency period of leg 1] = 'ADHO'. Reject if Negative."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and floatingRateResetFrequencyPeriodOfLeg1 exists
                and ["YEAR", "MNTH", "WEEK", "DAIL", "QURT", "EXPI"] any = floatingRateResetFrequencyPeriodOfLeg1
        then floatingRateResetFrequencyPeriodMultiplierOfLeg1 exists and floatingRateResetFrequencyPeriodMultiplierOfLeg1 > 0
        else if floatingRateResetFrequencyPeriodOfLeg1 = "ADHO" then floatingRateResetFrequencyPeriodMultiplierOfLeg1 is absent

condition DTCC_MAS_BR_0117_01: <"Floating rate reset frequency period of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "117" field "Floating rate reset frequency period of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Floating rate reset frequency period multiplier of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and floatingRateResetFrequencyPeriodMultiplierOfLeg2 exists then floatingRateResetFrequencyPeriodOfLeg2 exists

condition DTCC_MAS_BR_0118_01: <"Floating rate reset frequency period multiplier of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "118" field "Floating rate reset frequency period multiplier of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Floating rate reset frequency period of leg 2] is populated with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'. Reject if [Floating rate reset frequency period of leg 2] = 'ADHO'. Reject if Negative."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and floatingRateResetFrequencyPeriodOfLeg2 exists
                and ["YEAR", "MNTH", "WEEK", "DAIL", "QURT", "EXPI"] any = floatingRateResetFrequencyPeriodOfLeg2
        then floatingRateResetFrequencyPeriodMultiplierOfLeg2 exists and floatingRateResetFrequencyPeriodMultiplierOfLeg2 > 0
        else if floatingRateResetFrequencyPeriodOfLeg2 = "ADHO" then floatingRateResetFrequencyPeriodMultiplierOfLeg2 is absent

condition DTCC_MAS_BR_0119_01: <"Fixed rate payment frequency period of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "119" field "Fixed rate payment frequency period of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 1] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg1 exists then fixedRatePaymentFrequencyPeriodOfLeg1 exists

condition DTCC_MAS_BR_0120_01: <"Fixed rate payment frequency period multiplier of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "120" field "Fixed rate payment frequency period multiplier of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate payment frequency period of leg 1] is populated with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'. Reject if [Fixed rate payment frequency period of leg 1] is <blank> or populated with 'ADHO'. If [Fixed rate payment frequency period of leg 1] = EXPI, the value in this field must = 1. [Fixed rate payment frequency period multiplier of leg 1] MUST be  0 and < 1,000. Reject if Negative."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and fixedRatePaymentFrequencyPeriodOfLeg1 exists
                and [Frequency13Code__1 -> YEAR,
                     Frequency13Code__1 -> MNTH,
                     Frequency13Code__1 -> WEEK,
                     Frequency13Code__1 -> DAIL,
                     Frequency13Code__1 -> QURT,
                     Frequency13Code__1 -> EXPI ] any = fixedRatePaymentFrequencyPeriodOfLeg1
        then (fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 exists and fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 > 0 and fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 < 1000 and if fixedRatePaymentFrequencyPeriodOfLeg1 = Frequency13Code__1 -> EXPI then fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 = 1)
        else if fixedRatePaymentFrequencyPeriodOfLeg1 is absent
                or fixedRatePaymentFrequencyPeriodOfLeg1 = Frequency13Code__1 -> ADHO
        then fixedRatePaymentFrequencyPeriodMultiplierOfLeg1 is absent

condition DTCC_MAS_BR_0121_01: <"Fixed rate payment frequency period of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "121" field "Fixed rate payment frequency period of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Fixed rate of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and fixedRateOfLeg2 exists then fixedRatePaymentFrequencyPeriodOfLeg2 exists

condition DTCC_MAS_BR_0122_01: <"Fixed rate payment frequency period multiplier of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "122" field "Fixed rate payment frequency period multiplier of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then 
        Required if [Fixed rate payment frequency period of leg 2] is populated with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'.
        Reject if [Fixed rate payment frequency period of leg 2] is <blank> or populated with 'ADHO'.
        If [Fixed rate payment frequency period of leg 2] = EXPI, the value in this field must = 1.
        [Fixed rate payment frequency period multiplier of leg 2] MUST be  0 and < 1,000."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and fixedRatePaymentFrequencyPeriodOfLeg2 exists
                and [Frequency13Code__1 -> YEAR,
                     Frequency13Code__1 -> MNTH,
                     Frequency13Code__1 -> WEEK,
                     Frequency13Code__1 -> DAIL,
                     Frequency13Code__1 -> QURT,
                     Frequency13Code__1 -> EXPI] any = fixedRatePaymentFrequencyPeriodOfLeg2
        then (fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 exists and fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 > 0 and fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 < 1000 and if fixedRatePaymentFrequencyPeriodOfLeg2 = Frequency13Code__1 -> EXPI then fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 = 1)
        else if fixedRatePaymentFrequencyPeriodOfLeg2 is absent
                or fixedRatePaymentFrequencyPeriodOfLeg2 = Frequency13Code__1 -> ADHO
        then fixedRatePaymentFrequencyPeriodMultiplierOfLeg2 is absent

condition DTCC_MAS_BR_0123_01: <"Floating rate payment frequency period of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "123" field "Floating rate payment frequency period of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the floating rate of leg 1] or [Name of the floating rate of leg 1] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and (identifierOfFloatingRateOfLeg1 exists or nameOfTheFloatingRateOfLeg1 exists) then floatingRatePaymentFrequencyPeriodOfLeg1 exists

condition DTCC_MAS_BR_0124_01: <"Floating rate payment frequency period multiplier of leg 1 Condition">
    [docReference MAS DTCC_Specs dataElement "124" field "Floating rate payment frequency period multiplier of leg 1"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then 
        Required if [Floating rate payment frequency period of leg 1] is populated with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'.
        Reject if [Floating rate payment frequency period of leg 1] is <blank> or populated with 'ADHO'.
        If [Floating rate payment frequency period of leg 1] = EXPI, the value in this field must = 1.
        [Floating rate payment frequency period multiplier of leg 1] MUST be  0 and < 1,000.
        Reject if Negative."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and floatingRatePaymentFrequencyPeriodOfLeg1 exists
                and [Frequency13Code__1 -> YEAR, Frequency13Code__1 -> MNTH, Frequency13Code__1 -> WEEK, Frequency13Code__1 -> DAIL, Frequency13Code__1 -> QURT, Frequency13Code__1 -> EXPI] any = floatingRatePaymentFrequencyPeriodOfLeg1
        then (floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 exists and floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 > 0 and floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 < 1000 and if floatingRatePaymentFrequencyPeriodOfLeg1 = Frequency13Code__1 -> EXPI then floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 = 1)
        else if floatingRatePaymentFrequencyPeriodOfLeg1 is absent
                or floatingRatePaymentFrequencyPeriodOfLeg1 = Frequency13Code__1 -> ADHO
        then floatingRatePaymentFrequencyPeriodMultiplierOfLeg1 is absent

condition DTCC_MAS_BR_0125_01: <"Floating rate payment frequency period of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "125" field "Floating rate payment frequency period of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the floating rate of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["FRAS", "OPTN", "OTHR"] any = contractType and identifierOfFloatingRateOfLeg2 exists then floatingRatePaymentFrequencyPeriodOfLeg2 exists

condition DTCC_MAS_BR_0125_02: <"Floating rate payment frequency period of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "125" field "Floating rate payment frequency period of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Identifier of the floating rate of leg 2] or [Name of the floating rate of leg 2] is populated."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["SWAP", "SWPT"] any = contractType and (identifierOfFloatingRateOfLeg2 exists or nameOfTheFloatingRateOfLeg2 exists) then floatingRatePaymentFrequencyPeriodOfLeg2 exists

condition DTCC_MAS_BR_0126_01: <"Floating rate payment frequency period multiplier of leg 2 Condition">
    [docReference MAS DTCC_Specs dataElement "126" field "Floating rate payment frequency period multiplier of leg 2"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Floating rate payment frequency period of leg 2] is populated with 'YEAR', 'MNTH', 'WEEK', 'DAIL', 'QURT' or 'EXPI'.
        Reject if [Floating rate payment frequency period of leg 2] is <blank> or populated with 'ADHO'.
        If [Floating rate payment frequency period of leg 2] = EXPI, the value in this field must = 1.
        [Floating rate payment frequency period of leg 2] MUST be  0 and < 1,000."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and floatingRatePaymentFrequencyPeriodOfLeg2 exists
                and [Frequency13Code__1 -> YEAR, Frequency13Code__1 -> MNTH, Frequency13Code__1 -> WEEK, Frequency13Code__1 -> DAIL, Frequency13Code__1 -> QURT, Frequency13Code__1 -> EXPI] any = floatingRatePaymentFrequencyPeriodOfLeg2
        then (floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 exists and floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 > 0 and floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 < 1000 and if floatingRatePaymentFrequencyPeriodOfLeg2 = Frequency13Code__1 -> EXPI then floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 = 1)
        else if floatingRatePaymentFrequencyPeriodOfLeg2 is absent
                or floatingRatePaymentFrequencyPeriodOfLeg2 = Frequency13Code__1 -> ADHO
        then floatingRatePaymentFrequencyPeriodMultiplierOfLeg2 is absent

condition DTCC_MAS_BR_0127_01: <"Other payment type Condition">
        [docReference MAS DTCC_Specs dataElement "127" field "Other payment type"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then 
        Required if [Other payment amount] or [Other payment currency] or [Other payment payer] or [Other payment receiver] is populated.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment date, Other payment payer and Other payment receiver does not match."]
        //Other Payment Date not checked since it is not present as a field in the MAS technical specification to date
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType and ["INTR", "CURR", "COMM", "EQUI"] any = assetClass
                and (otherPayment -> amount exists or otherPayment -> currency exists or otherPayment -> payer exists or otherPayment -> receiver exists)
        then otherPayment -> paymentType exists
        and (if otherPayment -> paymentType count <> otherPayment -> amount count or
                otherPayment -> paymentType count <> otherPayment -> currency count or
                otherPayment -> paymentType count <> otherPayment -> payer count or
                otherPayment -> paymentType count <> otherPayment -> receiver count
                then False)

condition DTCC_MAS_BR_0127_02: <"Other payment type Condition">
        [docReference MAS DTCC_Specs dataElement "127" field "Other payment type"
        provision "When [Action Type] = TERM then Required if [Other payment amount] or [Other payment currency] or [Other payment payer] or [Other payment receiver] is populated.
        Reject if value is NOT = UWIN if populated.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment date, Other payment payer and Other payment receiver does not match."]
        //Other Payment Date not checked since it is not present as a field in the MAS technical specification to date
        if actionType = ActionTypeEnum -> TERM to-string and ["INTR", "CURR", "COMM", "EQUI"] any = assetClass
                and (otherPayment -> amount exists or otherPayment -> currency exists or otherPayment -> payer exists or otherPayment -> receiver exists)
        then otherPayment -> paymentType exists and otherPayment -> paymentType all = PaymentType4Code -> UWIN
        and (if otherPayment -> paymentType count <> otherPayment -> amount count or
                otherPayment -> paymentType count <> otherPayment -> currency count or
                otherPayment -> paymentType count <> otherPayment -> payer count or
                otherPayment -> paymentType count <> otherPayment -> receiver count
                then False)

condition DTCC_MAS_BR_0127_03: <"Other payment type Condition">
    [docReference MAS DTCC_Specs dataElement "127" field "Other payment type"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI then Required if [Other payment amount] or [Other payment currency] or [Other payment payer] or [Other payment receiver] is populated.
        If [Action Type] = 'NEWT', AND [Fixed rate of leg 1] and [Fixed rate of leg 2] and [Spread of leg 1] and [Spread of leg 2] are ALL <blank>, then [Other payment type] MUST equal = UFRO.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment date, Other payment payer and Other payment receiver does not match."]
        //Other Payment Date not checked since it is not present as a field in the MAS technical specification to date
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string] any = actionType
                and assetClass = "CRDT"
                and (otherPayment -> amount exists or otherPayment -> currency exists or otherPayment -> payer exists or otherPayment -> receiver exists)
        then otherPayment -> paymentType exists
                and (if actionType = ActionTypeEnum -> NEWT to-string and fixedRateOfLeg1 is absent and fixedRateOfLeg2 is absent and spreadOfLeg1 is absent and spreadOfLeg2 is absent then otherPayment -> paymentType all = PaymentType4Code -> UFRO)
                and (if otherPayment -> paymentType count <> otherPayment -> amount count or
                            otherPayment -> paymentType count <> otherPayment -> currency count or
                            otherPayment -> paymentType count <> otherPayment -> payer count or
                            otherPayment -> paymentType count <> otherPayment -> receiver count
                            then False)

condition DTCC_MAS_BR_0127_04: <"Other payment type Condition">
        [docReference MAS DTCC_Specs dataElement "127" field "Other payment type"
        provision "When [Action Type] = TERM then Required if [Other payment amount] or [Other payment currency] or [Other payment payer] or [Other payment receiver] is populated. 
        Reject if value is NOT = UWIN if populated.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment date, Other payment payer and Other payment receiver does not match."]
        //Other Payment Date not checked since it is not present as a field in the MAS technical specification to date
        if ActionTypeEnum -> TERM to-string = actionType
                and assetClass = "CRDT"
                and (otherPayment -> amount exists or otherPayment -> currency exists or otherPayment -> payer exists or otherPayment -> receiver exists)
                then otherPayment -> paymentType exists and otherPayment -> paymentType all = PaymentType4Code -> UWIN
                    and (if otherPayment -> paymentType count <> otherPayment -> amount count or
                            otherPayment -> paymentType count <> otherPayment -> currency count or
                            otherPayment -> paymentType count <> otherPayment -> payer count or
                            otherPayment -> paymentType count <> otherPayment -> receiver count
                            then False)

condition DTCC_MAS_BR_0128_01: <"Other payment amount Condition">
    [docReference MAS DTCC_Specs dataElement "128" field "Other payment amount"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM then Required if [Other payment type] is populated.
        Reject if Negative.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment date, Other payment payer and Other payment receiver does not match."]
        //Other Payment Date not checked since it is not present as a field in the MAS technical specification to date
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string] any = actionType and otherPayment -> paymentType exists then otherPayment -> amount exists and otherPayment -> amount all > 0
        and (if otherPayment -> amount count <> otherPayment -> paymentType count or
                    otherPayment -> amount count <> otherPayment -> currency count or
                    otherPayment -> amount count <> otherPayment -> payer count or
                    otherPayment -> amount count <> otherPayment -> receiver count
                    then False)

condition DTCC_MAS_BR_0129_01: <"Other payment currency Condition">
    [docReference MAS DTCC_Specs dataElement "129" field "Other payment currency"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM then 
        Required if [Other payment amount] is populated.
        Reject if [Other payment currency] = XAG, XAU, XBA, XBB, XBC, XBD, XDR, XEU, XFU, XPD or XPT.
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment payer and Other payment receiver does not match."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string] any = actionType and otherPayment -> amount exists and otherPayment -> amount all <> 0 then otherPayment -> currency exists and [ISOCurrencyCodeEnum -> XAG, ISOCurrencyCodeEnum -> XAU, ISOCurrencyCodeEnum -> XBA, ISOCurrencyCodeEnum -> XBB, ISOCurrencyCodeEnum -> XBC, ISOCurrencyCodeEnum -> XBD, ISOCurrencyCodeEnum -> XDR, ISOCurrencyCodeEnum -> XPD, ISOCurrencyCodeEnum -> XPT] <> otherPayment -> currency
        and (if otherPayment -> currency count <> otherPayment -> amount count or
                    otherPayment -> currency count <> otherPayment -> paymentType count or
                    otherPayment -> currency count <> otherPayment -> payer count or
                    otherPayment -> currency count <> otherPayment -> receiver count
                    then False)

condition DTCC_MAS_BR_0130_01: <"Other payment payer Condition">
    [docReference MAS DTCC_Specs dataElement "130" field "Other payment payer"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM then 
        Required if [Other payment amount] is populated.
        [Other payment payer] must NOT = [Other payment receiver].
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment payer and Other payment receiver does not match."]
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string] any = actionType and otherPayment -> amount exists and otherPayment -> amount all <> 0 then otherPayment -> payer exists and otherPayment -> payer <> otherPayment -> receiver
        and (if otherPayment -> payer count <> otherPayment -> amount count or
                    otherPayment -> payer count <> otherPayment -> paymentType count or
                    otherPayment -> payer count <> otherPayment -> currency count or
                    otherPayment -> payer count <> otherPayment -> receiver count
                    then False)

condition DTCC_MAS_BR_0131_01: <"Other payment receiver Condition">
    [docReference MAS DTCC_Specs dataElement "131" field "Other payment receiver"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM then 
        Required if [Other payment amount] is populated.
        [Other payment payer] must NOT = [Other payment receiver].
        Reject if for Other Payment fields, the number of Other payment amount, Other payment type, Other payment currency, Other payment payer and Other payment receiver does not match."]
    if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string] any = actionType and otherPayment -> amount exists and otherPayment -> amount all <> 0 then otherPayment -> receiver exists and otherPayment -> payer <> otherPayment -> receiver
        and (if otherPayment -> receiver count <> otherPayment -> amount count or
                    otherPayment -> receiver count <> otherPayment -> paymentType count or
                    otherPayment -> receiver count <> otherPayment -> currency count or
                    otherPayment -> receiver count <> otherPayment -> payer count
                    then False)

condition DTCC_MAS_BR_0132_01: <"Action type Condition">
    [docReference MAS DTCC_Specs dataElement "132" field "Action type"
        provision "See Action type & Event type tab for allowable combinations."]
        if actionType = ActionTypeEnum -> NEWT to-string
        then [EventTypeEnum -> TRAD to-string,
            EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> CLRG to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CLAL to-string,
            EventTypeEnum -> INCP to-string,
            EventTypeEnum -> CORP to-string] any = eventType
        else if actionType = ActionTypeEnum -> MODI to-string
        then [EventTypeEnum -> TRAD to-string,
            EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> ETRM to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CREV to-string,
            EventTypeEnum -> CORP to-string,
            EventTypeEnum -> INCP to-string,
            EventTypeEnum -> UPDT to-string] any = eventType
        else if actionType = ActionTypeEnum -> TERM to-string
        then [EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> ETRM to-string,
            EventTypeEnum -> CLRG to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CLAL to-string,
            EventTypeEnum -> CREV to-string,
            EventTypeEnum -> CORP to-string,
            EventTypeEnum -> INCP to-string] any = eventType
        else if actionType = ActionTypeEnum -> PRTO to-string
        then eventType = EventTypeEnum -> PTNG to-string
        else if [ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> EROR to-string, ActionTypeEnum -> VALU to-string] any = actionType
        then True

condition DTCC_MAS_BR_0133_01: <"Event type Condition">
    [docReference MAS DTCC_Specs dataElement "133" field "Event type"
        provision "Required for specific [Action Type]. See Action type & Event type tab. "]
        if actionType = ActionTypeEnum -> NEWT to-string
        then [EventTypeEnum -> TRAD to-string,
            EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> CLRG to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CLAL to-string,
            EventTypeEnum -> INCP to-string,
            EventTypeEnum -> CORP to-string] any = eventType
        else if actionType = ActionTypeEnum -> MODI to-string
        then [EventTypeEnum -> TRAD to-string,
            EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> ETRM to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CREV to-string,
            EventTypeEnum -> CORP to-string,
            EventTypeEnum -> INCP to-string,
            EventTypeEnum -> UPDT to-string] any = eventType
        else if actionType = ActionTypeEnum -> TERM to-string
        then [EventTypeEnum -> NOVA to-string,
            EventTypeEnum -> COMP to-string,
            EventTypeEnum -> ETRM to-string,
            EventTypeEnum -> CLRG to-string,
            EventTypeEnum -> EXER to-string,
            EventTypeEnum -> ALOC to-string,
            EventTypeEnum -> CLAL to-string,
            EventTypeEnum -> CREV to-string,
            EventTypeEnum -> CORP to-string,
            EventTypeEnum -> INCP to-string] any = eventType
        else if actionType = ActionTypeEnum -> PRTO to-string
        then eventType = EventTypeEnum -> PTNG to-string
        else if [ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> EROR to-string, ActionTypeEnum -> VALU to-string] any = actionType
        then True

    condition DTCC_MAS_BR_0001a_01: <"Execution agent of the Counterparty 1">
        [docReference MAS DTCC_Specs dataElement "[Not in regulation]" validationRule "Transaction"
        provision "When [Action Type] = NEWT, MODI, CORR, REVI, TERM, PRTO, EROR, VALU then [Execution agent of Counterparty 1] must NOT = [Counterparty 1] or [Counterparty 2] or [Reporting Entity]"]
        //TH Review May 2024 - Pending check of the Reporting Entity
        if [ActionTypeEnum -> NEWT to-string, ActionTypeEnum -> MODI to-string, ActionTypeEnum -> CORR to-string, ActionTypeEnum -> REVI to-string, ActionTypeEnum -> TERM to-string, ActionTypeEnum -> PRTO to-string, ActionTypeEnum -> EROR to-string, ActionTypeEnum -> MARU to-string, ActionTypeEnum -> VALU to-string] any = actionType
        then executionAgentOfTheCounterparty1 <> counterparty1
                or executionAgentOfTheCounterparty1 <> counterparty2    

type PriceAndNotation:
    priceMonetary BaseOne18Rate (0..1)
        [ruleReference PriceFormatMonetary]
    priceDecimal BaseOneRate (0..1)
        [ruleReference PriceFormatDecimal]
    priceCurrency ISOCurrencyCodeEnum (0..1)
        [ruleReference PriceCurrency]
    priceNotation PriceNotationEnum (0..1)
        [nonReportable]
        [ruleReference PriceNotation]

    condition MonetaryOrPercentage:
        optional choice priceMonetary, priceDecimal

type StrikePriceAndNotation:
    strikePriceMonetary BaseOne18Rate (0..1)
        [ruleReference StrikePriceMonetary]
    strikePriceDecimal BaseOneRate (0..1)
        [ruleReference StrikePriceDecimal]
    strikePriceCurrency string (0..1)
        [ruleReference StrikePriceCurrencyCurrencyPair]
    strikePriceNotation PriceNotationEnum (0..1)
        [nonReportable]
        [ruleReference GetStrikePriceNotation]

    condition MonetaryOrPercentage:
        optional choice strikePriceMonetary, strikePriceDecimal

type SpreadOfLeg1:
    spreadOfLeg1Monetary BaseOne18Rate (0..1)
        [ruleReference SpreadOfLeg1Monetary]
    spreadOfLeg1Decimal Max21D10Number (0..1)
        [ruleReference SpreadOfLeg1Decimal]
    spreadOfLeg1Basis BasisFormat (0..1)
        [ruleReference SpreadOfLeg1Basis]
    spreadNotationOfLeg1 PriceNotationEnum (0..1)
        [ruleReference SpreadNotationOfLeg1]
    spreadCurrencyOfLeg1 string (0..1)
        [ruleReference SpreadCurrencyOfLeg1]

type SpreadOfLeg2:
    spreadOfLeg2Monetary Max31D13Number (0..1)
        [ruleReference SpreadOfLeg2Monetary]
    spreadOfLeg2Decimal Max21D10Number (0..1)
        [ruleReference SpreadOfLeg2Decimal]
    spreadOfLeg2Basis BasisFormat (0..1)
        [ruleReference SpreadOfLeg2Basis]
    spreadNotationOfLeg2 PriceNotationEnum (0..1)
        [ruleReference SpreadNotationOfLeg2]
    spreadCurrencyOfLeg2 string (0..1)
        [ruleReference SpreadCurrencyOfLeg2]

type OtherPaymentReport:
    paymentType PaymentType4Code (0..1)
        [ruleReference OtherPaymentType]
    amount ShortFraction5DecimalNumber (0..1)
        [ruleReference OtherPaymentAmount]
    currency ISOCurrencyCodeEnum (0..1)
        [ruleReference OtherPaymentCurrency]
    payer Max72AlphaNumericText (0..1)
        [ruleReference OtherPaymentPayer]
    payerFormat PartyIdentifierFormatEnum (0..1)
        [nonReportable]
        [ruleReference OtherPaymentPayerFormat]
    receiver Max72AlphaNumericText (0..1)
        [ruleReference OtherPaymentReceiver]
    receiverFormat PartyIdentifierFormatEnum (0..1)
        [nonReportable]
        [ruleReference OtherPaymentReceiverFormat]

type PriceScheduleReport:
    effectiveDate ISODate (0..1)
        [ruleReference UnadjustedEffectiveDateOfThePrice]
    endDate ISODate (0..1)
        [ruleReference UnadjustedEndDateOfThePrice]
    priceMonetary BaseOne18Rate (0..1)
        [ruleReference PriceInEffectBetweenTheUnadjustedEffectiveDateAndEndDateMonetary]
    priceDecimal BaseOneRate (0..1)
        [ruleReference PriceInEffectBetweenTheUnadjustedEffectiveDateAndEndDateDecimal]

type StrikePriceScheduleReport:
    effectiveDate ISODate (0..1)
        [ruleReference EffectiveDateOfStrikePrice]
    endDate ISODate (0..1)
        [ruleReference EndDateOfStrikePrice]
    strikePriceInEffectOnAssociatedEffectiveDateMonetary BaseOne18Rate (0..1)
        [ruleReference StrikePriceInEffectOnAssociatedEffectiveDateMonetary]
    strikePriceInEffectOnAssociatedEffectiveDateDecimal BaseOneRate (0..1)
        [ruleReference StrikePriceInEffectOnAssociatedEffectiveDateDecimal]
    strikePriceNotationInEffectOnAssociatedEffectiveDate PriceNotationEnum (0..1)
        [nonReportable]
        [ruleReference StrikePriceNotationInEffectOnAssociatedEffectiveDate]

type BasketConstituentsReport:
    identifier string (0..1)
        [ruleReference IdentifierOfBasketConstituents]
    source ProductIdTypeEnum (0..1)
        [ruleReference SourceOfTheIdentifierOfTheBasketConstituents]

type Trader:
    name string (1..1)
    placeOfEmployment Address (1..1)
    isAuthorisedToTradeInSingapore boolean (1..1)
    currentLocation Address (1..1)

type MASNonReportable:
    enrichment EnrichmentData (0..1) <"Populated by pre-enrichment process">
        [nonReportable]
        [ruleReference EnrichmentData]
    preUpiData AnnaDsbUpiRequestAndType (0..1)
        [nonReportable]
        [ruleReference UpiPreEnrichmentData]
    postUpiData AnnaDsbUpiRecord (0..1)
        [nonReportable]
        [ruleReference UpiPostEnrichmentData]
